// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Orders.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A single order item.
    /// </summary>
    public partial class OrderItem
    {
        /// <summary>
        /// Initializes a new instance of the OrderItem class.
        /// </summary>
        public OrderItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OrderItem class.
        /// </summary>
        /// <param name="aSIN">The Amazon Standard Identification Number (ASIN)
        /// of the item.</param>
        /// <param name="orderItemId">An Amazon-defined order item
        /// identifier.</param>
        /// <param name="quantityOrdered">The number of items in the order.
        /// </param>
        /// <param name="sellerSKU">The seller stock keeping unit (SKU) of the
        /// item.</param>
        /// <param name="title">The name of the item.</param>
        /// <param name="quantityShipped">The number of items shipped.</param>
        /// <param name="productInfo">Product information for the item.</param>
        /// <param name="pointsGranted">The number and value of Amazon Points
        /// granted with the purchase of an item.</param>
        /// <param name="itemPrice">The selling price of the order item. Note
        /// that an order item is an item and a quantity. This means that the
        /// value of ItemPrice is equal to the selling price of the item
        /// multiplied by the quantity ordered. Note that ItemPrice excludes
        /// ShippingPrice and GiftWrapPrice.</param>
        /// <param name="shippingPrice">The shipping price of the item.</param>
        /// <param name="itemTax">The tax on the item price.</param>
        /// <param name="shippingTax">The tax on the shipping price.</param>
        /// <param name="shippingDiscount">The discount on the shipping
        /// price.</param>
        /// <param name="shippingDiscountTax">The tax on the discount on the
        /// shipping price.</param>
        /// <param name="promotionDiscount">The total of all promotional
        /// discounts in the offer.</param>
        /// <param name="promotionDiscountTax">The tax on the total of all
        /// promotional discounts in the offer.</param>
        /// <param name="cODFee">The fee charged for COD service.</param>
        /// <param name="cODFeeDiscount">The discount on the COD fee.</param>
        /// <param name="isGift">When true, the item is a gift.</param>
        /// <param name="conditionNote">The condition of the item as described
        /// by the seller.</param>
        /// <param name="conditionId">The condition of the item.
        ///
        /// Possible values: New, Used, Collectible, Refurbished, Preorder,
        /// Club.</param>
        /// <param name="conditionSubtypeId">The subcondition of the item.
        ///
        /// Possible values: New, Mint, Very Good, Good, Acceptable, Poor,
        /// Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box,
        /// Any, Other.</param>
        /// <param name="scheduledDeliveryStartDate">The start date of the
        /// scheduled delivery window in the time zone of the order
        /// destination. In ISO 8601 date time format.</param>
        /// <param name="scheduledDeliveryEndDate">The end date of the
        /// scheduled delivery window in the time zone of the order
        /// destination. In ISO 8601 date time format.</param>
        /// <param name="priceDesignation">Indicates that the selling price is
        /// a special price that is available only for Amazon Business orders.
        /// For more information about the Amazon Business Seller Program, see
        /// the [Amazon Business
        /// website](https://www.amazon.com/b2b/info/amazon-business).
        ///
        /// Possible values: BusinessPrice - A special price that is available
        /// only for Amazon Business orders.</param>
        /// <param name="taxCollection">Information about withheld
        /// taxes.</param>
        /// <param name="serialNumberRequired">When true, the product type for
        /// this item has a serial number.
        ///
        /// Returned only for Amazon Easy Ship orders.</param>
        /// <param name="isTransparency">When true, transparency codes are
        /// required.</param>
        /// <param name="iossNumber">The IOSS number of the seller. Sellers
        /// selling in the EU will be assigned a unique IOSS number that must
        /// be listed on all packages sent to the EU.</param>
        /// <param name="deemedResellerCategory">The category of deemed
        /// reseller. This applies to selling partners that are not based in
        /// the EU and is used to help them meet the VAT Deemed Reseller tax
        /// laws in the EU and UK. Possible values include: 'IOSS',
        /// 'UOSS'</param>
        public OrderItem(string aSIN, string orderItemId, int quantityOrdered, string sellerSKU = default(string), string title = default(string), int? quantityShipped = default(int?), ProductInfoDetail productInfo = default(ProductInfoDetail), PointsGrantedDetail pointsGranted = default(PointsGrantedDetail), Money itemPrice = default(Money), Money shippingPrice = default(Money), Money itemTax = default(Money), Money shippingTax = default(Money), Money shippingDiscount = default(Money), Money shippingDiscountTax = default(Money), Money promotionDiscount = default(Money), Money promotionDiscountTax = default(Money), IList<string> promotionIds = default(IList<string>), Money cODFee = default(Money), Money cODFeeDiscount = default(Money), bool? isGift = default(bool?), string conditionNote = default(string), string conditionId = default(string), string conditionSubtypeId = default(string), string scheduledDeliveryStartDate = default(string), string scheduledDeliveryEndDate = default(string), string priceDesignation = default(string), TaxCollection taxCollection = default(TaxCollection), bool? serialNumberRequired = default(bool?), bool? isTransparency = default(bool?), string iossNumber = default(string), string deemedResellerCategory = default(string))
        {
            ASIN = aSIN;
            SellerSKU = sellerSKU;
            OrderItemId = orderItemId;
            Title = title;
            QuantityOrdered = quantityOrdered;
            QuantityShipped = quantityShipped;
            ProductInfo = productInfo;
            PointsGranted = pointsGranted;
            ItemPrice = itemPrice;
            ShippingPrice = shippingPrice;
            ItemTax = itemTax;
            ShippingTax = shippingTax;
            ShippingDiscount = shippingDiscount;
            ShippingDiscountTax = shippingDiscountTax;
            PromotionDiscount = promotionDiscount;
            PromotionDiscountTax = promotionDiscountTax;
            PromotionIds = promotionIds;
            CODFee = cODFee;
            CODFeeDiscount = cODFeeDiscount;
            IsGift = isGift;
            ConditionNote = conditionNote;
            ConditionId = conditionId;
            ConditionSubtypeId = conditionSubtypeId;
            ScheduledDeliveryStartDate = scheduledDeliveryStartDate;
            ScheduledDeliveryEndDate = scheduledDeliveryEndDate;
            PriceDesignation = priceDesignation;
            TaxCollection = taxCollection;
            SerialNumberRequired = serialNumberRequired;
            IsTransparency = isTransparency;
            IossNumber = iossNumber;
            DeemedResellerCategory = deemedResellerCategory;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Amazon Standard Identification Number (ASIN) of
        /// the item.
        /// </summary>
        [JsonProperty(PropertyName = "ASIN")]
        public string ASIN { get; set; }

        /// <summary>
        /// Gets or sets the seller stock keeping unit (SKU) of the item.
        /// </summary>
        [JsonProperty(PropertyName = "SellerSKU")]
        public string SellerSKU { get; set; }

        /// <summary>
        /// Gets or sets an Amazon-defined order item identifier.
        /// </summary>
        [JsonProperty(PropertyName = "OrderItemId")]
        public string OrderItemId { get; set; }

        /// <summary>
        /// Gets or sets the name of the item.
        /// </summary>
        [JsonProperty(PropertyName = "Title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the number of items in the order.
        /// </summary>
        [JsonProperty(PropertyName = "QuantityOrdered")]
        public int QuantityOrdered { get; set; }

        /// <summary>
        /// Gets or sets the number of items shipped.
        /// </summary>
        [JsonProperty(PropertyName = "QuantityShipped")]
        public int? QuantityShipped { get; set; }

        /// <summary>
        /// Gets or sets product information for the item.
        /// </summary>
        [JsonProperty(PropertyName = "ProductInfo")]
        public ProductInfoDetail ProductInfo { get; set; }

        /// <summary>
        /// Gets or sets the number and value of Amazon Points granted with the
        /// purchase of an item.
        /// </summary>
        [JsonProperty(PropertyName = "PointsGranted")]
        public PointsGrantedDetail PointsGranted { get; set; }

        /// <summary>
        /// Gets or sets the selling price of the order item. Note that an
        /// order item is an item and a quantity. This means that the value of
        /// ItemPrice is equal to the selling price of the item multiplied by
        /// the quantity ordered. Note that ItemPrice excludes ShippingPrice
        /// and GiftWrapPrice.
        /// </summary>
        [JsonProperty(PropertyName = "ItemPrice")]
        public Money ItemPrice { get; set; }

        /// <summary>
        /// Gets or sets the shipping price of the item.
        /// </summary>
        [JsonProperty(PropertyName = "ShippingPrice")]
        public Money ShippingPrice { get; set; }

        /// <summary>
        /// Gets or sets the tax on the item price.
        /// </summary>
        [JsonProperty(PropertyName = "ItemTax")]
        public Money ItemTax { get; set; }

        /// <summary>
        /// Gets or sets the tax on the shipping price.
        /// </summary>
        [JsonProperty(PropertyName = "ShippingTax")]
        public Money ShippingTax { get; set; }

        /// <summary>
        /// Gets or sets the discount on the shipping price.
        /// </summary>
        [JsonProperty(PropertyName = "ShippingDiscount")]
        public Money ShippingDiscount { get; set; }

        /// <summary>
        /// Gets or sets the tax on the discount on the shipping price.
        /// </summary>
        [JsonProperty(PropertyName = "ShippingDiscountTax")]
        public Money ShippingDiscountTax { get; set; }

        /// <summary>
        /// Gets or sets the total of all promotional discounts in the offer.
        /// </summary>
        [JsonProperty(PropertyName = "PromotionDiscount")]
        public Money PromotionDiscount { get; set; }

        /// <summary>
        /// Gets or sets the tax on the total of all promotional discounts in
        /// the offer.
        /// </summary>
        [JsonProperty(PropertyName = "PromotionDiscountTax")]
        public Money PromotionDiscountTax { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PromotionIds")]
        public IList<string> PromotionIds { get; set; }

        /// <summary>
        /// Gets or sets the fee charged for COD service.
        /// </summary>
        [JsonProperty(PropertyName = "CODFee")]
        public Money CODFee { get; set; }

        /// <summary>
        /// Gets or sets the discount on the COD fee.
        /// </summary>
        [JsonProperty(PropertyName = "CODFeeDiscount")]
        public Money CODFeeDiscount { get; set; }

        /// <summary>
        /// Gets or sets when true, the item is a gift.
        /// </summary>
        [JsonProperty(PropertyName = "IsGift")]
        public bool? IsGift { get; set; }

        /// <summary>
        /// Gets or sets the condition of the item as described by the seller.
        /// </summary>
        [JsonProperty(PropertyName = "ConditionNote")]
        public string ConditionNote { get; set; }

        /// <summary>
        /// Gets or sets the condition of the item.
        ///
        /// Possible values: New, Used, Collectible, Refurbished, Preorder,
        /// Club.
        /// </summary>
        [JsonProperty(PropertyName = "ConditionId")]
        public string ConditionId { get; set; }

        /// <summary>
        /// Gets or sets the subcondition of the item.
        ///
        /// Possible values: New, Mint, Very Good, Good, Acceptable, Poor,
        /// Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box,
        /// Any, Other.
        /// </summary>
        [JsonProperty(PropertyName = "ConditionSubtypeId")]
        public string ConditionSubtypeId { get; set; }

        /// <summary>
        /// Gets or sets the start date of the scheduled delivery window in the
        /// time zone of the order destination. In ISO 8601 date time format.
        /// </summary>
        [JsonProperty(PropertyName = "ScheduledDeliveryStartDate")]
        public string ScheduledDeliveryStartDate { get; set; }

        /// <summary>
        /// Gets or sets the end date of the scheduled delivery window in the
        /// time zone of the order destination. In ISO 8601 date time format.
        /// </summary>
        [JsonProperty(PropertyName = "ScheduledDeliveryEndDate")]
        public string ScheduledDeliveryEndDate { get; set; }

        /// <summary>
        /// Gets or sets indicates that the selling price is a special price
        /// that is available only for Amazon Business orders. For more
        /// information about the Amazon Business Seller Program, see the
        /// [Amazon Business
        /// website](https://www.amazon.com/b2b/info/amazon-business).
        ///
        /// Possible values: BusinessPrice - A special price that is available
        /// only for Amazon Business orders.
        /// </summary>
        [JsonProperty(PropertyName = "PriceDesignation")]
        public string PriceDesignation { get; set; }

        /// <summary>
        /// Gets or sets information about withheld taxes.
        /// </summary>
        [JsonProperty(PropertyName = "TaxCollection")]
        public TaxCollection TaxCollection { get; set; }

        /// <summary>
        /// Gets or sets when true, the product type for this item has a serial
        /// number.
        ///
        /// Returned only for Amazon Easy Ship orders.
        /// </summary>
        [JsonProperty(PropertyName = "SerialNumberRequired")]
        public bool? SerialNumberRequired { get; set; }

        /// <summary>
        /// Gets or sets when true, transparency codes are required.
        /// </summary>
        [JsonProperty(PropertyName = "IsTransparency")]
        public bool? IsTransparency { get; set; }

        /// <summary>
        /// Gets or sets the IOSS number of the seller. Sellers selling in the
        /// EU will be assigned a unique IOSS number that must be listed on all
        /// packages sent to the EU.
        /// </summary>
        [JsonProperty(PropertyName = "IossNumber")]
        public string IossNumber { get; set; }

        /// <summary>
        /// Gets or sets the category of deemed reseller. This applies to
        /// selling partners that are not based in the EU and is used to help
        /// them meet the VAT Deemed Reseller tax laws in the EU and UK.
        /// Possible values include: 'IOSS', 'UOSS'
        /// </summary>
        [JsonProperty(PropertyName = "DeemedResellerCategory")]
        public string DeemedResellerCategory { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ASIN == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ASIN");
            }
            if (OrderItemId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OrderItemId");
            }
        }
    }
}
