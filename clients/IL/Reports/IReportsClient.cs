// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Reports
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// The Selling Partner API for Reports lets you retrieve and manage a
    /// variety of reports that can help selling partners manage their
    /// businesses.
    /// </summary>
    public partial interface IReportsClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Returns report details for the reports that match the filters that
        /// you specify.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 0.0222 | 10 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='reportTypes'>
        /// A list of report types used to filter reports. When reportTypes is
        /// provided, the other filter parameters (processingStatuses,
        /// marketplaceIds, createdSince, createdUntil) and pageSize may also
        /// be provided. Either reportTypes or nextToken is required.
        /// </param>
        /// <param name='processingStatuses'>
        /// A list of processing statuses used to filter reports.
        /// </param>
        /// <param name='marketplaceIds'>
        /// A list of marketplace identifiers used to filter reports. The
        /// reports returned will match at least one of the marketplaces that
        /// you specify.
        /// </param>
        /// <param name='pageSize'>
        /// The maximum number of reports to return in a single call.
        /// </param>
        /// <param name='createdSince'>
        /// The earliest report creation date and time for reports to include
        /// in the response, in ISO 8601 date time format. The default is 90
        /// days ago. Reports are retained for a maximum of 90 days.
        /// </param>
        /// <param name='createdUntil'>
        /// The latest report creation date and time for reports to include in
        /// the response, in ISO 8601 date time format. The default is now.
        /// </param>
        /// <param name='nextToken'>
        /// A string token returned in the response to your previous request.
        /// nextToken is returned when the number of results exceeds the
        /// specified pageSize value. To get the next page of results, call the
        /// getReports operation and include this token as the only parameter.
        /// Specifying nextToken with any other parameters will cause the
        /// request to fail.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetReportsHeaders>> GetReportsWithHttpMessagesAsync(IList<string> reportTypes = default(IList<string>), IList<string> processingStatuses = default(IList<string>), IList<string> marketplaceIds = default(IList<string>), int? pageSize = 10, System.DateTime? createdSince = default(System.DateTime?), System.DateTime? createdUntil = default(System.DateTime?), string nextToken = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a report.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 0.0167 | 15 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateReportHeaders>> CreateReportWithHttpMessagesAsync(CreateReportSpecification body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels the report that you specify. Only reports with
        /// processingStatus=IN_QUEUE can be cancelled. Cancelled reports are
        /// returned in subsequent calls to the getReport and getReports
        /// operations.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 0.0222 | 10 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='reportId'>
        /// The identifier for the report. This identifier is unique only in
        /// combination with a seller ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorList,CancelReportHeaders>> CancelReportWithHttpMessagesAsync(string reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns report details (including the reportDocumentId, if
        /// available) for the report that you specify.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2.0 | 15 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='reportId'>
        /// The identifier for the report. This identifier is unique only in
        /// combination with a seller ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetReportHeaders>> GetReportWithHttpMessagesAsync(string reportId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns report schedule details that match the filters that you
        /// specify.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 0.0222 | 10 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='reportTypes'>
        /// A list of report types used to filter report schedules.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetReportSchedulesHeaders>> GetReportSchedulesWithHttpMessagesAsync(IList<string> reportTypes, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a report schedule. If a report schedule with the same
        /// report type and marketplace IDs already exists, it will be
        /// cancelled and replaced with this one.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 0.0222 | 10 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,CreateReportScheduleHeaders>> CreateReportScheduleWithHttpMessagesAsync(CreateReportScheduleSpecification body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels the report schedule that you specify.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 0.0222 | 10 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='reportScheduleId'>
        /// The identifier for the report schedule. This identifier is unique
        /// only in combination with a seller ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ErrorList,CancelReportScheduleHeaders>> CancelReportScheduleWithHttpMessagesAsync(string reportScheduleId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns report schedule details for the report schedule that you
        /// specify.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 0.0222 | 10 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='reportScheduleId'>
        /// The identifier for the report schedule. This identifier is unique
        /// only in combination with a seller ID.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetReportScheduleHeaders>> GetReportScheduleWithHttpMessagesAsync(string reportScheduleId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns the information required for retrieving a report document's
        /// contents.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 0.0167 | 15 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='reportDocumentId'>
        /// The identifier for the report document.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetReportDocumentHeaders>> GetReportDocumentWithHttpMessagesAsync(string reportDocumentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
