// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Reports.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Report
    {
        /// <summary>
        /// Initializes a new instance of the Report class.
        /// </summary>
        public Report()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Report class.
        /// </summary>
        /// <param name="reportId">The identifier for the report. This
        /// identifier is unique only in combination with a seller ID.</param>
        /// <param name="reportType">The report type.</param>
        /// <param name="createdTime">The date and time when the report was
        /// created.</param>
        /// <param name="processingStatus">The processing status of the report.
        /// Possible values include: 'CANCELLED', 'DONE', 'FATAL',
        /// 'IN_PROGRESS', 'IN_QUEUE'</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers for
        /// the report.</param>
        /// <param name="dataStartTime">The start of a date and time range used
        /// for selecting the data to report.</param>
        /// <param name="dataEndTime">The end of a date and time range used for
        /// selecting the data to report.</param>
        /// <param name="reportScheduleId">The identifier of the report
        /// schedule that created this report (if any). This identifier is
        /// unique only in combination with a seller ID.</param>
        /// <param name="processingStartTime">The date and time when the report
        /// processing started, in ISO 8601 date time format.</param>
        /// <param name="processingEndTime">The date and time when the report
        /// processing completed, in ISO 8601 date time format.</param>
        /// <param name="reportDocumentId">The identifier for the report
        /// document. Pass this into the getReportDocument operation to get the
        /// information you will need to retrieve and decrypt the report
        /// document's contents.</param>
        public Report(string reportId, string reportType, System.DateTime createdTime, string processingStatus, IList<string> marketplaceIds = default(IList<string>), System.DateTime? dataStartTime = default(System.DateTime?), System.DateTime? dataEndTime = default(System.DateTime?), string reportScheduleId = default(string), System.DateTime? processingStartTime = default(System.DateTime?), System.DateTime? processingEndTime = default(System.DateTime?), string reportDocumentId = default(string))
        {
            MarketplaceIds = marketplaceIds;
            ReportId = reportId;
            ReportType = reportType;
            DataStartTime = dataStartTime;
            DataEndTime = dataEndTime;
            ReportScheduleId = reportScheduleId;
            CreatedTime = createdTime;
            ProcessingStatus = processingStatus;
            ProcessingStartTime = processingStartTime;
            ProcessingEndTime = processingEndTime;
            ReportDocumentId = reportDocumentId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a list of marketplace identifiers for the report.
        /// </summary>
        [JsonProperty(PropertyName = "marketplaceIds")]
        public IList<string> MarketplaceIds { get; set; }

        /// <summary>
        /// Gets or sets the identifier for the report. This identifier is
        /// unique only in combination with a seller ID.
        /// </summary>
        [JsonProperty(PropertyName = "reportId")]
        public string ReportId { get; set; }

        /// <summary>
        /// Gets or sets the report type.
        /// </summary>
        [JsonProperty(PropertyName = "reportType")]
        public string ReportType { get; set; }

        /// <summary>
        /// Gets or sets the start of a date and time range used for selecting
        /// the data to report.
        /// </summary>
        [JsonProperty(PropertyName = "dataStartTime")]
        public System.DateTime? DataStartTime { get; set; }

        /// <summary>
        /// Gets or sets the end of a date and time range used for selecting
        /// the data to report.
        /// </summary>
        [JsonProperty(PropertyName = "dataEndTime")]
        public System.DateTime? DataEndTime { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the report schedule that created
        /// this report (if any). This identifier is unique only in combination
        /// with a seller ID.
        /// </summary>
        [JsonProperty(PropertyName = "reportScheduleId")]
        public string ReportScheduleId { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the report was created.
        /// </summary>
        [JsonProperty(PropertyName = "createdTime")]
        public System.DateTime CreatedTime { get; set; }

        /// <summary>
        /// Gets or sets the processing status of the report. Possible values
        /// include: 'CANCELLED', 'DONE', 'FATAL', 'IN_PROGRESS', 'IN_QUEUE'
        /// </summary>
        [JsonProperty(PropertyName = "processingStatus")]
        public string ProcessingStatus { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the report processing started,
        /// in ISO 8601 date time format.
        /// </summary>
        [JsonProperty(PropertyName = "processingStartTime")]
        public System.DateTime? ProcessingStartTime { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the report processing
        /// completed, in ISO 8601 date time format.
        /// </summary>
        [JsonProperty(PropertyName = "processingEndTime")]
        public System.DateTime? ProcessingEndTime { get; set; }

        /// <summary>
        /// Gets or sets the identifier for the report document. Pass this into
        /// the getReportDocument operation to get the information you will
        /// need to retrieve and decrypt the report document's contents.
        /// </summary>
        [JsonProperty(PropertyName = "reportDocumentId")]
        public string ReportDocumentId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ReportId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ReportId");
            }
            if (ReportType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ReportType");
            }
            if (ProcessingStatus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProcessingStatus");
            }
        }
    }
}
