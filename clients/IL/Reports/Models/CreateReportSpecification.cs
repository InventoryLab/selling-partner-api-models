// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Reports.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information required to create the report.
    /// </summary>
    public partial class CreateReportSpecification
    {
        /// <summary>
        /// Initializes a new instance of the CreateReportSpecification class.
        /// </summary>
        public CreateReportSpecification()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateReportSpecification class.
        /// </summary>
        /// <param name="reportType">The report type.</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers. The
        /// report document's contents will contain data for all of the
        /// specified marketplaces, unless the report type indicates
        /// otherwise.</param>
        /// <param name="dataStartTime">The start of a date and time range, in
        /// ISO 8601 date time format, used for selecting the data to report.
        /// The default is now. The value must be prior to or equal to the
        /// current date and time. Not all report types make use of
        /// this.</param>
        /// <param name="dataEndTime">The end of a date and time range, in ISO
        /// 8601 date time format, used for selecting the data to report. The
        /// default is now. The value must be prior to or equal to the current
        /// date and time. Not all report types make use of this.</param>
        public CreateReportSpecification(string reportType, IList<string> marketplaceIds, IDictionary<string, string> reportOptions = default(IDictionary<string, string>), System.DateTime? dataStartTime = default(System.DateTime?), System.DateTime? dataEndTime = default(System.DateTime?))
        {
            ReportOptions = reportOptions;
            ReportType = reportType;
            DataStartTime = dataStartTime;
            DataEndTime = dataEndTime;
            MarketplaceIds = marketplaceIds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reportOptions")]
        public IDictionary<string, string> ReportOptions { get; set; }

        /// <summary>
        /// Gets or sets the report type.
        /// </summary>
        [JsonProperty(PropertyName = "reportType")]
        public string ReportType { get; set; }

        /// <summary>
        /// Gets or sets the start of a date and time range, in ISO 8601 date
        /// time format, used for selecting the data to report. The default is
        /// now. The value must be prior to or equal to the current date and
        /// time. Not all report types make use of this.
        /// </summary>
        [JsonProperty(PropertyName = "dataStartTime")]
        public System.DateTime? DataStartTime { get; set; }

        /// <summary>
        /// Gets or sets the end of a date and time range, in ISO 8601 date
        /// time format, used for selecting the data to report. The default is
        /// now. The value must be prior to or equal to the current date and
        /// time. Not all report types make use of this.
        /// </summary>
        [JsonProperty(PropertyName = "dataEndTime")]
        public System.DateTime? DataEndTime { get; set; }

        /// <summary>
        /// Gets or sets a list of marketplace identifiers. The report
        /// document's contents will contain data for all of the specified
        /// marketplaces, unless the report type indicates otherwise.
        /// </summary>
        [JsonProperty(PropertyName = "marketplaceIds")]
        public IList<string> MarketplaceIds { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ReportType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ReportType");
            }
            if (MarketplaceIds == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MarketplaceIds");
            }
            if (MarketplaceIds != null)
            {
                if (MarketplaceIds.Count > 25)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "MarketplaceIds", 25);
                }
                if (MarketplaceIds.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "MarketplaceIds", 1);
                }
            }
        }
    }
}
