// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Reports.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CreateReportScheduleSpecification
    {
        /// <summary>
        /// Initializes a new instance of the CreateReportScheduleSpecification
        /// class.
        /// </summary>
        public CreateReportScheduleSpecification()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateReportScheduleSpecification
        /// class.
        /// </summary>
        /// <param name="reportType">The report type.</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers for
        /// the report schedule.</param>
        /// <param name="period">One of a set of predefined ISO 8601 periods
        /// that specifies how often a report should be created. Possible
        /// values include: 'PT5M', 'PT15M', 'PT30M', 'PT1H', 'PT2H', 'PT4H',
        /// 'PT8H', 'PT12H', 'P1D', 'P2D', 'P3D', 'PT84H', 'P7D', 'P14D',
        /// 'P15D', 'P18D', 'P30D', 'P1M'</param>
        /// <param name="nextReportCreationTime">The date and time when the
        /// schedule will create its next report, in ISO 8601 date time
        /// format.</param>
        public CreateReportScheduleSpecification(string reportType, IList<string> marketplaceIds, string period, IDictionary<string, string> reportOptions = default(IDictionary<string, string>), System.DateTime? nextReportCreationTime = default(System.DateTime?))
        {
            ReportType = reportType;
            MarketplaceIds = marketplaceIds;
            ReportOptions = reportOptions;
            Period = period;
            NextReportCreationTime = nextReportCreationTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the report type.
        /// </summary>
        [JsonProperty(PropertyName = "reportType")]
        public string ReportType { get; set; }

        /// <summary>
        /// Gets or sets a list of marketplace identifiers for the report
        /// schedule.
        /// </summary>
        [JsonProperty(PropertyName = "marketplaceIds")]
        public IList<string> MarketplaceIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reportOptions")]
        public IDictionary<string, string> ReportOptions { get; set; }

        /// <summary>
        /// Gets or sets one of a set of predefined ISO 8601 periods that
        /// specifies how often a report should be created. Possible values
        /// include: 'PT5M', 'PT15M', 'PT30M', 'PT1H', 'PT2H', 'PT4H', 'PT8H',
        /// 'PT12H', 'P1D', 'P2D', 'P3D', 'PT84H', 'P7D', 'P14D', 'P15D',
        /// 'P18D', 'P30D', 'P1M'
        /// </summary>
        [JsonProperty(PropertyName = "period")]
        public string Period { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the schedule will create its
        /// next report, in ISO 8601 date time format.
        /// </summary>
        [JsonProperty(PropertyName = "nextReportCreationTime")]
        public System.DateTime? NextReportCreationTime { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ReportType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ReportType");
            }
            if (MarketplaceIds == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MarketplaceIds");
            }
            if (Period == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Period");
            }
            if (MarketplaceIds != null)
            {
                if (MarketplaceIds.Count > 25)
                {
                    throw new ValidationException(ValidationRules.MaxItems, "MarketplaceIds", 25);
                }
                if (MarketplaceIds.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "MarketplaceIds", 1);
                }
            }
        }
    }
}
