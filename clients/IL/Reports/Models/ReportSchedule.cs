// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Reports.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Detailed information about a report schedule.
    /// </summary>
    public partial class ReportSchedule
    {
        /// <summary>
        /// Initializes a new instance of the ReportSchedule class.
        /// </summary>
        public ReportSchedule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReportSchedule class.
        /// </summary>
        /// <param name="reportScheduleId">The identifier for the report
        /// schedule. This identifier is unique only in combination with a
        /// seller ID.</param>
        /// <param name="reportType">The report type.</param>
        /// <param name="period">An ISO 8601 period value that indicates how
        /// often a report should be created.</param>
        /// <param name="marketplaceIds">A list of marketplace identifiers. The
        /// report document's contents will contain data for all of the
        /// specified marketplaces, unless the report type indicates
        /// otherwise.</param>
        /// <param name="nextReportCreationTime">The date and time when the
        /// schedule will create its next report, in ISO 8601 date time
        /// format.</param>
        public ReportSchedule(string reportScheduleId, string reportType, string period, IList<string> marketplaceIds = default(IList<string>), IDictionary<string, string> reportOptions = default(IDictionary<string, string>), System.DateTime? nextReportCreationTime = default(System.DateTime?))
        {
            ReportScheduleId = reportScheduleId;
            ReportType = reportType;
            MarketplaceIds = marketplaceIds;
            ReportOptions = reportOptions;
            Period = period;
            NextReportCreationTime = nextReportCreationTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier for the report schedule. This
        /// identifier is unique only in combination with a seller ID.
        /// </summary>
        [JsonProperty(PropertyName = "reportScheduleId")]
        public string ReportScheduleId { get; set; }

        /// <summary>
        /// Gets or sets the report type.
        /// </summary>
        [JsonProperty(PropertyName = "reportType")]
        public string ReportType { get; set; }

        /// <summary>
        /// Gets or sets a list of marketplace identifiers. The report
        /// document's contents will contain data for all of the specified
        /// marketplaces, unless the report type indicates otherwise.
        /// </summary>
        [JsonProperty(PropertyName = "marketplaceIds")]
        public IList<string> MarketplaceIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "reportOptions")]
        public IDictionary<string, string> ReportOptions { get; set; }

        /// <summary>
        /// Gets or sets an ISO 8601 period value that indicates how often a
        /// report should be created.
        /// </summary>
        [JsonProperty(PropertyName = "period")]
        public string Period { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the schedule will create its
        /// next report, in ISO 8601 date time format.
        /// </summary>
        [JsonProperty(PropertyName = "nextReportCreationTime")]
        public System.DateTime? NextReportCreationTime { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ReportScheduleId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ReportScheduleId");
            }
            if (ReportType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ReportType");
            }
            if (Period == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Period");
            }
        }
    }
}
