// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Reports.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The response for the getReports operation.
    /// </summary>
    public partial class GetReportsResponse
    {
        /// <summary>
        /// Initializes a new instance of the GetReportsResponse class.
        /// </summary>
        public GetReportsResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetReportsResponse class.
        /// </summary>
        /// <param name="reports">The reports.</param>
        /// <param name="nextToken">Returned when the number of results exceeds
        /// pageSize. To get the next page of results, call getReports with
        /// this token as the only parameter.</param>
        public GetReportsResponse(IList<Report> reports, string nextToken = default(string))
        {
            Reports = reports;
            NextToken = nextToken;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the reports.
        /// </summary>
        [JsonProperty(PropertyName = "reports")]
        public IList<Report> Reports { get; set; }

        /// <summary>
        /// Gets or sets returned when the number of results exceeds pageSize.
        /// To get the next page of results, call getReports with this token as
        /// the only parameter.
        /// </summary>
        [JsonProperty(PropertyName = "nextToken")]
        public string NextToken { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Reports == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Reports");
            }
            if (Reports != null)
            {
                foreach (var element in Reports)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
