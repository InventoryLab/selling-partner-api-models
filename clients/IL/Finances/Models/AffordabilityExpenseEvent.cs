// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Finances.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An expense related to an affordability promotion.
    /// </summary>
    public partial class AffordabilityExpenseEvent
    {
        /// <summary>
        /// Initializes a new instance of the AffordabilityExpenseEvent class.
        /// </summary>
        public AffordabilityExpenseEvent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AffordabilityExpenseEvent class.
        /// </summary>
        /// <param name="taxTypeCGST">Central Goods and Service Tax, charged
        /// and collected by the central government.</param>
        /// <param name="taxTypeSGST">State Goods and Service Tax, charged and
        /// collected by the state government.</param>
        /// <param name="taxTypeIGST">Integrated Goods and Service Tax, charged
        /// and collected by the central government.</param>
        /// <param name="amazonOrderId">An Amazon-defined identifier for an
        /// order.</param>
        /// <param name="postedDate">The date and time when the financial event
        /// was created.</param>
        /// <param name="marketplaceId">An encrypted, Amazon-defined
        /// marketplace identifier.</param>
        /// <param name="transactionType">Indicates the type of transaction.
        ///
        /// Possible values:
        ///
        /// * Charge - For an affordability promotion expense.
        ///
        /// * Refund - For an affordability promotion expense reversal.</param>
        /// <param name="baseExpense">The amount charged for clicks incurred
        /// under the Sponsored Products program.</param>
        /// <param name="totalExpense">The total amount charged to the seller.
        /// TotalExpense = BaseExpense + TaxTypeIGST + TaxTypeCGST +
        /// TaxTypeSGST.</param>
        public AffordabilityExpenseEvent(Currency taxTypeCGST, Currency taxTypeSGST, Currency taxTypeIGST, string amazonOrderId = default(string), System.DateTime? postedDate = default(System.DateTime?), string marketplaceId = default(string), string transactionType = default(string), Currency baseExpense = default(Currency), Currency totalExpense = default(Currency))
        {
            AmazonOrderId = amazonOrderId;
            PostedDate = postedDate;
            MarketplaceId = marketplaceId;
            TransactionType = transactionType;
            BaseExpense = baseExpense;
            TaxTypeCGST = taxTypeCGST;
            TaxTypeSGST = taxTypeSGST;
            TaxTypeIGST = taxTypeIGST;
            TotalExpense = totalExpense;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets an Amazon-defined identifier for an order.
        /// </summary>
        [JsonProperty(PropertyName = "AmazonOrderId")]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// Gets or sets the date and time when the financial event was
        /// created.
        /// </summary>
        [JsonProperty(PropertyName = "PostedDate")]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// Gets or sets an encrypted, Amazon-defined marketplace identifier.
        /// </summary>
        [JsonProperty(PropertyName = "MarketplaceId")]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Gets or sets indicates the type of transaction.
        ///
        /// Possible values:
        ///
        /// * Charge - For an affordability promotion expense.
        ///
        /// * Refund - For an affordability promotion expense reversal.
        /// </summary>
        [JsonProperty(PropertyName = "TransactionType")]
        public string TransactionType { get; set; }

        /// <summary>
        /// Gets or sets the amount charged for clicks incurred under the
        /// Sponsored Products program.
        /// </summary>
        [JsonProperty(PropertyName = "BaseExpense")]
        public Currency BaseExpense { get; set; }

        /// <summary>
        /// Gets or sets central Goods and Service Tax, charged and collected
        /// by the central government.
        /// </summary>
        [JsonProperty(PropertyName = "TaxTypeCGST")]
        public Currency TaxTypeCGST { get; set; }

        /// <summary>
        /// Gets or sets state Goods and Service Tax, charged and collected by
        /// the state government.
        /// </summary>
        [JsonProperty(PropertyName = "TaxTypeSGST")]
        public Currency TaxTypeSGST { get; set; }

        /// <summary>
        /// Gets or sets integrated Goods and Service Tax, charged and
        /// collected by the central government.
        /// </summary>
        [JsonProperty(PropertyName = "TaxTypeIGST")]
        public Currency TaxTypeIGST { get; set; }

        /// <summary>
        /// Gets or sets the total amount charged to the seller. TotalExpense =
        /// BaseExpense + TaxTypeIGST + TaxTypeCGST + TaxTypeSGST.
        /// </summary>
        [JsonProperty(PropertyName = "TotalExpense")]
        public Currency TotalExpense { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TaxTypeCGST == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TaxTypeCGST");
            }
            if (TaxTypeSGST == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TaxTypeSGST");
            }
            if (TaxTypeIGST == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TaxTypeIGST");
            }
        }
    }
}
