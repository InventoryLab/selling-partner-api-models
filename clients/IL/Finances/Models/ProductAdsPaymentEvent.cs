// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Finances.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A Sponsored Products payment event.
    /// </summary>
    public partial class ProductAdsPaymentEvent
    {
        /// <summary>
        /// Initializes a new instance of the ProductAdsPaymentEvent class.
        /// </summary>
        public ProductAdsPaymentEvent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProductAdsPaymentEvent class.
        /// </summary>
        /// <param name="postedDate">The date and time when the financial event
        /// was posted.</param>
        /// <param name="transactionType">Indicates if the transaction is for a
        /// charge or a refund.
        ///
        /// Possible values:
        ///
        /// * charge - Charge
        ///
        /// * refund - Refund</param>
        /// <param name="invoiceId">Identifier for the invoice that the
        /// transaction appears in.</param>
        /// <param name="baseValue">Base amount of the transaction, before
        /// tax.</param>
        /// <param name="taxValue">Tax amount of the transaction.</param>
        /// <param name="transactionValue">The total amount of the transaction.
        /// Equal to baseValue + taxValue.</param>
        public ProductAdsPaymentEvent(System.DateTime? postedDate = default(System.DateTime?), string transactionType = default(string), string invoiceId = default(string), Currency baseValue = default(Currency), Currency taxValue = default(Currency), Currency transactionValue = default(Currency))
        {
            PostedDate = postedDate;
            TransactionType = transactionType;
            InvoiceId = invoiceId;
            BaseValue = baseValue;
            TaxValue = taxValue;
            TransactionValue = transactionValue;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the date and time when the financial event was posted.
        /// </summary>
        [JsonProperty(PropertyName = "postedDate")]
        public System.DateTime? PostedDate { get; set; }

        /// <summary>
        /// Gets or sets indicates if the transaction is for a charge or a
        /// refund.
        ///
        /// Possible values:
        ///
        /// * charge - Charge
        ///
        /// * refund - Refund
        /// </summary>
        [JsonProperty(PropertyName = "transactionType")]
        public string TransactionType { get; set; }

        /// <summary>
        /// Gets or sets identifier for the invoice that the transaction
        /// appears in.
        /// </summary>
        [JsonProperty(PropertyName = "invoiceId")]
        public string InvoiceId { get; set; }

        /// <summary>
        /// Gets or sets base amount of the transaction, before tax.
        /// </summary>
        [JsonProperty(PropertyName = "baseValue")]
        public Currency BaseValue { get; set; }

        /// <summary>
        /// Gets or sets tax amount of the transaction.
        /// </summary>
        [JsonProperty(PropertyName = "taxValue")]
        public Currency TaxValue { get; set; }

        /// <summary>
        /// Gets or sets the total amount of the transaction. Equal to
        /// baseValue + taxValue.
        /// </summary>
        [JsonProperty(PropertyName = "transactionValue")]
        public Currency TransactionValue { get; set; }

    }
}
