// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Tokens.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Model of a restricted resource.
    /// </summary>
    public partial class RestrictedResource
    {
        /// <summary>
        /// Initializes a new instance of the RestrictedResource class.
        /// </summary>
        public RestrictedResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RestrictedResource class.
        /// </summary>
        /// <param name="method">The HTTP method in the restricted resource.
        /// Possible values include: 'GET', 'PUT', 'POST', 'DELETE'</param>
        /// <param name="path">The path in the restricted resource. Here are
        /// some path examples:
        /// - ```/orders/v0/orders```. For getting an RDT for the getOrders
        /// operation of the Orders API. For bulk orders.
        /// - ```/orders/v0/orders/123-1234567-1234567```. For getting an RDT
        /// for the getOrder operation of the Orders API. For a specific order.
        /// - ```/orders/v0/orders/123-1234567-1234567/orderItems```. For
        /// getting an RDT for the getOrderItems operation of the Orders API.
        /// For the order items in a specific order.
        /// - ```/mfn/v0/shipments/FBA1234ABC5D```. For getting an RDT for the
        /// getShipment operation of the Shipping API. For a specific shipment.
        /// - ```/mfn/v0/shipments/{shipmentId}```. For getting an RDT for the
        /// getShipment operation of the Shipping API. For any of a selling
        /// partner's shipments that you specify when you call the getShipment
        /// operation.</param>
        /// <param name="dataElements">Indicates the type of Personally
        /// Identifiable Information requested. This parameter is required only
        /// when getting an RDT for use with the getOrder, getOrders, or
        /// getOrderItems operation of the Orders API. For more information,
        /// see the [Tokens API Use Case
        /// Guide](https://github.com/amzn/selling-partner-api-docs/blob/main/guides/en-US/use-case-guides/tokens-api-use-case-guide/tokens-API-use-case-guide-2021-03-01.md).
        /// Possible values include:
        /// - **buyerInfo**. On the order level this includes general
        /// identifying information about the buyer and tax-related
        /// information. On the order item level this includes gift wrap
        /// information and custom order information, if available.
        /// - **shippingAddress**. This includes information for fulfilling
        /// orders.</param>
        public RestrictedResource(string method, string path, IList<string> dataElements = default(IList<string>))
        {
            Method = method;
            Path = path;
            DataElements = dataElements;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the HTTP method in the restricted resource. Possible
        /// values include: 'GET', 'PUT', 'POST', 'DELETE'
        /// </summary>
        [JsonProperty(PropertyName = "method")]
        public string Method { get; set; }

        /// <summary>
        /// Gets or sets the path in the restricted resource. Here are some
        /// path examples:
        /// - ```/orders/v0/orders```. For getting an RDT for the getOrders
        /// operation of the Orders API. For bulk orders.
        /// - ```/orders/v0/orders/123-1234567-1234567```. For getting an RDT
        /// for the getOrder operation of the Orders API. For a specific order.
        /// - ```/orders/v0/orders/123-1234567-1234567/orderItems```. For
        /// getting an RDT for the getOrderItems operation of the Orders API.
        /// For the order items in a specific order.
        /// - ```/mfn/v0/shipments/FBA1234ABC5D```. For getting an RDT for the
        /// getShipment operation of the Shipping API. For a specific shipment.
        /// - ```/mfn/v0/shipments/{shipmentId}```. For getting an RDT for the
        /// getShipment operation of the Shipping API. For any of a selling
        /// partner's shipments that you specify when you call the getShipment
        /// operation.
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets indicates the type of Personally Identifiable
        /// Information requested. This parameter is required only when getting
        /// an RDT for use with the getOrder, getOrders, or getOrderItems
        /// operation of the Orders API. For more information, see the [Tokens
        /// API Use Case
        /// Guide](https://github.com/amzn/selling-partner-api-docs/blob/main/guides/en-US/use-case-guides/tokens-api-use-case-guide/tokens-API-use-case-guide-2021-03-01.md).
        /// Possible values include:
        /// - **buyerInfo**. On the order level this includes general
        /// identifying information about the buyer and tax-related
        /// information. On the order item level this includes gift wrap
        /// information and custom order information, if available.
        /// - **shippingAddress**. This includes information for fulfilling
        /// orders.
        /// </summary>
        [JsonProperty(PropertyName = "dataElements")]
        public IList<string> DataElements { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Method == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Method");
            }
            if (Path == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Path");
            }
        }
    }
}
