// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.ProductFees
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ProductFeesClient.
    /// </summary>
    public static partial class ProductFeesClientExtensions
    {
            /// <summary>
            /// Returns the estimated fees for the item indicated by the specified seller
            /// SKU in the marketplace specified in the request body.
            ///
            /// You can call getMyFeesEstimateForSKU for an item on behalf of a selling
            /// partner before the selling partner sets the item's price. They can then
            /// take estimated fees into account. With each fees estimate request, you must
            /// include an original identifier. This identifier is included in the fees
            /// estimate so you can correlate a fees estimate with the original request.
            ///
            /// **Note:** This value is only an estimate, actual costs may vary. Search
            /// "fees" in [Seller Central](https://sellercentral.amazon.com/) and consult
            /// the store-specific fee schedule for the most up-to-date information.
            ///
            /// **Usage Plans:**
            ///
            /// | Plan type | Rate (requests per second) | Burst |
            /// | ---- | ---- | ---- |
            /// |Default| 10 | 20 |
            /// |Selling partner specific| Variable | Variable |
            ///
            /// The x-amzn-RateLimit-Limit response header returns the usage plan rate
            /// limits that were applied to the requested operation. Rate limits for some
            /// selling partners will vary from the default rate and burst shown in the
            /// table above. For more information, see "Usage Plans and Rate Limits" in the
            /// Selling Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='sellerSKU'>
            /// Used to identify an item in the given marketplace. SellerSKU is qualified
            /// by the seller's SellerId, which is included with every operation that you
            /// submit.
            /// </param>
            public static GetMyFeesEstimateResponse GetMyFeesEstimateForSKU(this IProductFeesClient operations, GetMyFeesEstimateRequest body, string sellerSKU)
            {
                return operations.GetMyFeesEstimateForSKUAsync(body, sellerSKU).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the estimated fees for the item indicated by the specified seller
            /// SKU in the marketplace specified in the request body.
            ///
            /// You can call getMyFeesEstimateForSKU for an item on behalf of a selling
            /// partner before the selling partner sets the item's price. They can then
            /// take estimated fees into account. With each fees estimate request, you must
            /// include an original identifier. This identifier is included in the fees
            /// estimate so you can correlate a fees estimate with the original request.
            ///
            /// **Note:** This value is only an estimate, actual costs may vary. Search
            /// "fees" in [Seller Central](https://sellercentral.amazon.com/) and consult
            /// the store-specific fee schedule for the most up-to-date information.
            ///
            /// **Usage Plans:**
            ///
            /// | Plan type | Rate (requests per second) | Burst |
            /// | ---- | ---- | ---- |
            /// |Default| 10 | 20 |
            /// |Selling partner specific| Variable | Variable |
            ///
            /// The x-amzn-RateLimit-Limit response header returns the usage plan rate
            /// limits that were applied to the requested operation. Rate limits for some
            /// selling partners will vary from the default rate and burst shown in the
            /// table above. For more information, see "Usage Plans and Rate Limits" in the
            /// Selling Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='sellerSKU'>
            /// Used to identify an item in the given marketplace. SellerSKU is qualified
            /// by the seller's SellerId, which is included with every operation that you
            /// submit.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetMyFeesEstimateResponse> GetMyFeesEstimateForSKUAsync(this IProductFeesClient operations, GetMyFeesEstimateRequest body, string sellerSKU, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMyFeesEstimateForSKUWithHttpMessagesAsync(body, sellerSKU, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the estimated fees for the item indicated by the specified Asin in
            /// the marketplace specified in the request body.
            ///
            /// You can call getMyFeesEstimateForASIN for an item on behalf of a selling
            /// partner before the selling partner sets the item's price. They can then
            /// take estimated fees into account. With each product fees request, you must
            /// include an original identifier. This identifier is included in the fees
            /// estimate so you can correlate a fees estimate with the original request.
            ///
            /// **Note:** This value is only an estimate, actual costs may vary. Search
            /// "fees" in [Seller Central](https://sellercentral.amazon.com/) and consult
            /// the store-specific fee schedule for the most up-to-date information.
            ///
            /// **Usage Plans:**
            ///
            /// | Plan type | Rate (requests per second) | Burst |
            /// | ---- | ---- | ---- |
            /// |Default| 10 | 20 |
            /// |Selling partner specific| Variable | Variable |
            ///
            /// The x-amzn-RateLimit-Limit response header returns the usage plan rate
            /// limits that were applied to the requested operation. Rate limits for some
            /// selling partners will vary from the default rate and burst shown in the
            /// table above. For more information, see "Usage Plans and Rate Limits" in the
            /// Selling Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='asin'>
            /// The Amazon Standard Identification Number (ASIN) of the item.
            /// </param>
            public static GetMyFeesEstimateResponse GetMyFeesEstimateForASIN(this IProductFeesClient operations, GetMyFeesEstimateRequest body, string asin)
            {
                return operations.GetMyFeesEstimateForASINAsync(body, asin).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the estimated fees for the item indicated by the specified Asin in
            /// the marketplace specified in the request body.
            ///
            /// You can call getMyFeesEstimateForASIN for an item on behalf of a selling
            /// partner before the selling partner sets the item's price. They can then
            /// take estimated fees into account. With each product fees request, you must
            /// include an original identifier. This identifier is included in the fees
            /// estimate so you can correlate a fees estimate with the original request.
            ///
            /// **Note:** This value is only an estimate, actual costs may vary. Search
            /// "fees" in [Seller Central](https://sellercentral.amazon.com/) and consult
            /// the store-specific fee schedule for the most up-to-date information.
            ///
            /// **Usage Plans:**
            ///
            /// | Plan type | Rate (requests per second) | Burst |
            /// | ---- | ---- | ---- |
            /// |Default| 10 | 20 |
            /// |Selling partner specific| Variable | Variable |
            ///
            /// The x-amzn-RateLimit-Limit response header returns the usage plan rate
            /// limits that were applied to the requested operation. Rate limits for some
            /// selling partners will vary from the default rate and burst shown in the
            /// table above. For more information, see "Usage Plans and Rate Limits" in the
            /// Selling Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='asin'>
            /// The Amazon Standard Identification Number (ASIN) of the item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetMyFeesEstimateResponse> GetMyFeesEstimateForASINAsync(this IProductFeesClient operations, GetMyFeesEstimateRequest body, string asin, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMyFeesEstimateForASINWithHttpMessagesAsync(body, asin, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
