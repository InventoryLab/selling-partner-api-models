// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Sellers.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Detailed information about an Amazon market where a seller can list
    /// items for sale and customers can view and purchase items.
    /// </summary>
    public partial class Marketplace
    {
        /// <summary>
        /// Initializes a new instance of the Marketplace class.
        /// </summary>
        public Marketplace()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Marketplace class.
        /// </summary>
        /// <param name="id">The encrypted marketplace value.</param>
        /// <param name="name">Marketplace name.</param>
        /// <param name="countryCode">The ISO 3166-1 alpha-2 format country
        /// code of the marketplace.</param>
        /// <param name="defaultCurrencyCode">The ISO 4217 format currency code
        /// of the marketplace.</param>
        /// <param name="defaultLanguageCode">The ISO 639-1 format language
        /// code of the marketplace.</param>
        /// <param name="domainName">The domain name of the
        /// marketplace.</param>
        public Marketplace(string id, string name, string countryCode, string defaultCurrencyCode, string defaultLanguageCode, string domainName)
        {
            Id = id;
            Name = name;
            CountryCode = countryCode;
            DefaultCurrencyCode = defaultCurrencyCode;
            DefaultLanguageCode = defaultLanguageCode;
            DomainName = domainName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the encrypted marketplace value.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets marketplace name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the ISO 3166-1 alpha-2 format country code of the
        /// marketplace.
        /// </summary>
        [JsonProperty(PropertyName = "countryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or sets the ISO 4217 format currency code of the marketplace.
        /// </summary>
        [JsonProperty(PropertyName = "defaultCurrencyCode")]
        public string DefaultCurrencyCode { get; set; }

        /// <summary>
        /// Gets or sets the ISO 639-1 format language code of the marketplace.
        /// </summary>
        [JsonProperty(PropertyName = "defaultLanguageCode")]
        public string DefaultLanguageCode { get; set; }

        /// <summary>
        /// Gets or sets the domain name of the marketplace.
        /// </summary>
        [JsonProperty(PropertyName = "domainName")]
        public string DomainName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (CountryCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CountryCode");
            }
            if (DefaultCurrencyCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DefaultCurrencyCode");
            }
            if (DefaultLanguageCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DefaultLanguageCode");
            }
            if (DomainName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DomainName");
            }
            if (CountryCode != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(CountryCode, "^([A-Z]{2})$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "CountryCode", "^([A-Z]{2})$");
                }
            }
        }
    }
}
