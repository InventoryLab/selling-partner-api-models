// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Authorization
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AuthorizationClient.
    /// </summary>
    public static partial class AuthorizationClientExtensions
    {
            /// <summary>
            /// Returns the Login with Amazon (LWA) authorization code for an existing
            /// Amazon MWS authorization.
            /// </summary>
            /// <remarks>
            /// With the getAuthorizationCode operation, you can request a Login With
            /// Amazon (LWA) authorization code that will allow you to call a Selling
            /// Partner API on behalf of a seller who has already authorized you to call
            /// Amazon Marketplace Web Service (Amazon MWS). You specify a developer ID, an
            /// MWS auth token, and a seller ID. Taken together, these represent the Amazon
            /// MWS authorization that the seller previously granted you. The operation
            /// returns an LWA authorization code that can be exchanged for a refresh token
            /// and access token representing authorization to call the Selling Partner API
            /// on the seller's behalf. By using this API, sellers who have already
            /// authorized you for Amazon MWS do not need to re-authorize you for the
            /// Selling Partner API.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 1 | 5 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sellingPartnerId'>
            /// The seller ID of the seller for whom you are requesting Selling Partner API
            /// authorization. This must be the seller ID of the seller who authorized your
            /// application on the Marketplace Appstore.
            /// </param>
            /// <param name='developerId'>
            /// Your developer ID. This must be one of the developer ID values that you
            /// provided when you registered your application in Developer Central.
            /// </param>
            /// <param name='mwsAuthToken'>
            /// The MWS Auth Token that was generated when the seller authorized your
            /// application on the Marketplace Appstore.
            /// </param>
            public static GetAuthorizationCodeResponse GetAuthorizationCode(this IAuthorizationClient operations, string sellingPartnerId, string developerId, string mwsAuthToken)
            {
                return operations.GetAuthorizationCodeAsync(sellingPartnerId, developerId, mwsAuthToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the Login with Amazon (LWA) authorization code for an existing
            /// Amazon MWS authorization.
            /// </summary>
            /// <remarks>
            /// With the getAuthorizationCode operation, you can request a Login With
            /// Amazon (LWA) authorization code that will allow you to call a Selling
            /// Partner API on behalf of a seller who has already authorized you to call
            /// Amazon Marketplace Web Service (Amazon MWS). You specify a developer ID, an
            /// MWS auth token, and a seller ID. Taken together, these represent the Amazon
            /// MWS authorization that the seller previously granted you. The operation
            /// returns an LWA authorization code that can be exchanged for a refresh token
            /// and access token representing authorization to call the Selling Partner API
            /// on the seller's behalf. By using this API, sellers who have already
            /// authorized you for Amazon MWS do not need to re-authorize you for the
            /// Selling Partner API.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 1 | 5 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sellingPartnerId'>
            /// The seller ID of the seller for whom you are requesting Selling Partner API
            /// authorization. This must be the seller ID of the seller who authorized your
            /// application on the Marketplace Appstore.
            /// </param>
            /// <param name='developerId'>
            /// Your developer ID. This must be one of the developer ID values that you
            /// provided when you registered your application in Developer Central.
            /// </param>
            /// <param name='mwsAuthToken'>
            /// The MWS Auth Token that was generated when the seller authorized your
            /// application on the Marketplace Appstore.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetAuthorizationCodeResponse> GetAuthorizationCodeAsync(this IAuthorizationClient operations, string sellingPartnerId, string developerId, string mwsAuthToken, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAuthorizationCodeWithHttpMessagesAsync(sellingPartnerId, developerId, mwsAuthToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
