// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.CatalogItems.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Relationship details for the Amazon catalog item for the indicated
    /// Amazon marketplace.
    /// </summary>
    public partial class ItemRelationshipsByMarketplace
    {
        /// <summary>
        /// Initializes a new instance of the ItemRelationshipsByMarketplace
        /// class.
        /// </summary>
        public ItemRelationshipsByMarketplace()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ItemRelationshipsByMarketplace
        /// class.
        /// </summary>
        /// <param name="marketplaceId">Amazon marketplace identifier.</param>
        /// <param name="relationships">Relationships for the item.</param>
        public ItemRelationshipsByMarketplace(string marketplaceId, IList<ItemRelationship> relationships)
        {
            MarketplaceId = marketplaceId;
            Relationships = relationships;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets amazon marketplace identifier.
        /// </summary>
        [JsonProperty(PropertyName = "marketplaceId")]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Gets or sets relationships for the item.
        /// </summary>
        [JsonProperty(PropertyName = "relationships")]
        public IList<ItemRelationship> Relationships { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MarketplaceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MarketplaceId");
            }
            if (Relationships == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Relationships");
            }
            if (Relationships != null)
            {
                foreach (var element in Relationships)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
