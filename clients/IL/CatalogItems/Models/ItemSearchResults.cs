// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.CatalogItems.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Items in the Amazon catalog and search related metadata.
    /// </summary>
    public partial class ItemSearchResults
    {
        /// <summary>
        /// Initializes a new instance of the ItemSearchResults class.
        /// </summary>
        public ItemSearchResults()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ItemSearchResults class.
        /// </summary>
        /// <param name="numberOfResults">For `identifiers`-based searches, the
        /// total number of Amazon catalog items found. For `keywords`-based
        /// searches, the estimated total number of Amazon catalog items
        /// matched by the search query (only results up to the page count
        /// limit will be returned per request regardless of the number found).
        ///
        /// Note: The maximum number of items (ASINs) that can be returned and
        /// paged through is 1000.</param>
        /// <param name="pagination">If available, the `nextToken` and/or
        /// `previousToken` values required to return paginated
        /// results.</param>
        /// <param name="refinements">Search refinements for `keywords`-based
        /// searches.</param>
        /// <param name="items">A list of items from the Amazon
        /// catalog.</param>
        public ItemSearchResults(int numberOfResults, Pagination pagination, Refinements refinements, IList<Item> items)
        {
            NumberOfResults = numberOfResults;
            Pagination = pagination;
            Refinements = refinements;
            Items = items;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets for `identifiers`-based searches, the total number of
        /// Amazon catalog items found. For `keywords`-based searches, the
        /// estimated total number of Amazon catalog items matched by the
        /// search query (only results up to the page count limit will be
        /// returned per request regardless of the number found).
        ///
        /// Note: The maximum number of items (ASINs) that can be returned and
        /// paged through is 1000.
        /// </summary>
        [JsonProperty(PropertyName = "numberOfResults")]
        public int NumberOfResults { get; set; }

        /// <summary>
        /// Gets or sets if available, the `nextToken` and/or `previousToken`
        /// values required to return paginated results.
        /// </summary>
        [JsonProperty(PropertyName = "pagination")]
        public Pagination Pagination { get; set; }

        /// <summary>
        /// Gets or sets search refinements for `keywords`-based searches.
        /// </summary>
        [JsonProperty(PropertyName = "refinements")]
        public Refinements Refinements { get; set; }

        /// <summary>
        /// Gets or sets a list of items from the Amazon catalog.
        /// </summary>
        [JsonProperty(PropertyName = "items")]
        public IList<Item> Items { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Pagination == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Pagination");
            }
            if (Refinements == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Refinements");
            }
            if (Items == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Items");
            }
            if (Refinements != null)
            {
                Refinements.Validate();
            }
            if (Items != null)
            {
                foreach (var element in Items)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
