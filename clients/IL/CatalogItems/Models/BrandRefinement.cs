// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.CatalogItems.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Description of a brand that can be used to get more fine-grained search
    /// results.
    /// </summary>
    public partial class BrandRefinement
    {
        /// <summary>
        /// Initializes a new instance of the BrandRefinement class.
        /// </summary>
        public BrandRefinement()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BrandRefinement class.
        /// </summary>
        /// <param name="numberOfResults">The estimated number of results that
        /// would still be returned if refinement key applied.</param>
        /// <param name="brandName">Brand name. For display and can be used as
        /// a search refinement.</param>
        public BrandRefinement(int numberOfResults, string brandName)
        {
            NumberOfResults = numberOfResults;
            BrandName = brandName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the estimated number of results that would still be
        /// returned if refinement key applied.
        /// </summary>
        [JsonProperty(PropertyName = "numberOfResults")]
        public int NumberOfResults { get; set; }

        /// <summary>
        /// Gets or sets brand name. For display and can be used as a search
        /// refinement.
        /// </summary>
        [JsonProperty(PropertyName = "brandName")]
        public string BrandName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BrandName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BrandName");
            }
        }
    }
}
