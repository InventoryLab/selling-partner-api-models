// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.CatalogItems.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Search refinements.
    /// </summary>
    public partial class Refinements
    {
        /// <summary>
        /// Initializes a new instance of the Refinements class.
        /// </summary>
        public Refinements()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Refinements class.
        /// </summary>
        /// <param name="brands">Brand search refinements.</param>
        /// <param name="classifications">Classification search
        /// refinements.</param>
        public Refinements(IList<BrandRefinement> brands, IList<ClassificationRefinement> classifications)
        {
            Brands = brands;
            Classifications = classifications;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets brand search refinements.
        /// </summary>
        [JsonProperty(PropertyName = "brands")]
        public IList<BrandRefinement> Brands { get; set; }

        /// <summary>
        /// Gets or sets classification search refinements.
        /// </summary>
        [JsonProperty(PropertyName = "classifications")]
        public IList<ClassificationRefinement> Classifications { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Brands == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Brands");
            }
            if (Classifications == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Classifications");
            }
            if (Brands != null)
            {
                foreach (var element in Brands)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Classifications != null)
            {
                foreach (var element1 in Classifications)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
