// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.CatalogItems.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Image for an item in the Amazon catalog.
    /// </summary>
    public partial class ItemImage
    {
        /// <summary>
        /// Initializes a new instance of the ItemImage class.
        /// </summary>
        public ItemImage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ItemImage class.
        /// </summary>
        /// <param name="variant">Variant of the image, such as MAIN or PT01.
        /// Possible values include: 'MAIN', 'PT01', 'PT02', 'PT03', 'PT04',
        /// 'PT05', 'PT06', 'PT07', 'PT08', 'SWCH'</param>
        /// <param name="link">Link, or URL, for the image.</param>
        /// <param name="height">Height of the image in pixels.</param>
        /// <param name="width">Width of the image in pixels.</param>
        public ItemImage(string variant, string link, int height, int width)
        {
            Variant = variant;
            Link = link;
            Height = height;
            Width = width;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets variant of the image, such as MAIN or PT01. Possible
        /// values include: 'MAIN', 'PT01', 'PT02', 'PT03', 'PT04', 'PT05',
        /// 'PT06', 'PT07', 'PT08', 'SWCH'
        /// </summary>
        [JsonProperty(PropertyName = "variant")]
        public string Variant { get; set; }

        /// <summary>
        /// Gets or sets link, or URL, for the image.
        /// </summary>
        [JsonProperty(PropertyName = "link")]
        public string Link { get; set; }

        /// <summary>
        /// Gets or sets height of the image in pixels.
        /// </summary>
        [JsonProperty(PropertyName = "height")]
        public int Height { get; set; }

        /// <summary>
        /// Gets or sets width of the image in pixels.
        /// </summary>
        [JsonProperty(PropertyName = "width")]
        public int Width { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Variant == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Variant");
            }
            if (Link == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Link");
            }
        }
    }
}
