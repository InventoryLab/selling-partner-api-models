// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Information returned by Amazon about a Less Than Truckload/Full
    /// Truckload (LTL/FTL) shipment shipped by a carrier that has not
    /// partnered with Amazon.
    /// </summary>
    public partial class NonPartneredLtlDataOutput
    {
        /// <summary>
        /// Initializes a new instance of the NonPartneredLtlDataOutput class.
        /// </summary>
        public NonPartneredLtlDataOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NonPartneredLtlDataOutput class.
        /// </summary>
        /// <param name="carrierName">The carrier that you are using for the
        /// inbound shipment.</param>
        public NonPartneredLtlDataOutput(string carrierName, string proNumber)
        {
            CarrierName = carrierName;
            ProNumber = proNumber;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the carrier that you are using for the inbound
        /// shipment.
        /// </summary>
        [JsonProperty(PropertyName = "CarrierName")]
        public string CarrierName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ProNumber")]
        public string ProNumber { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CarrierName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CarrierName");
            }
            if (ProNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProNumber");
            }
        }
    }
}
