// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information returned by Amazon about a Less Than Truckload/Full
    /// Truckload (LTL/FTL) shipment by an Amazon-partnered carrier.
    /// </summary>
    public partial class PartneredLtlDataOutput
    {
        /// <summary>
        /// Initializes a new instance of the PartneredLtlDataOutput class.
        /// </summary>
        public PartneredLtlDataOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PartneredLtlDataOutput class.
        /// </summary>
        /// <param name="contact">Contact information for the person in the
        /// seller's organization who is responsible for the shipment. Used by
        /// the carrier if they have questions about the shipment.</param>
        /// <param name="boxCount">The number of boxes in the shipment.</param>
        /// <param name="freightReadyDate">The date that the shipment will be
        /// ready to be picked up by the carrier. Must be in YYYY-MM-DD
        /// format.</param>
        /// <param name="totalWeight">The total weight of the shipment.</param>
        /// <param name="previewPickupDate">The estimated date that the
        /// shipment will be picked up by the carrier, in YYYY-MM-DD
        /// format.</param>
        /// <param name="previewDeliveryDate">The estimated date that the
        /// shipment will be delivered to an Amazon fulfillment center, in
        /// YYYY-MM-DD format.</param>
        /// <param name="previewFreightClass">The freight class of the shipment
        /// as estimated by Amazon if you did not include a freight class when
        /// you called the putTransportDetails operation. Possible values
        /// include: '50', '55', '60', '65', '70', '77.5', '85', '92.5', '100',
        /// '110', '125', '150', '175', '200', '250', '300', '400',
        /// '500'</param>
        /// <param name="amazonReferenceId">A unique identifier created by
        /// Amazon that identifies this Amazon-partnered, Less Than
        /// Truckload/Full Truckload (LTL/FTL) shipment.</param>
        /// <param name="isBillOfLadingAvailable">Indicates whether the bill of
        /// lading for the shipment is available.</param>
        /// <param name="carrierName">The carrier for the inbound
        /// shipment.</param>
        /// <param name="sellerFreightClass">Possible values include: '50',
        /// '55', '60', '65', '70', '77.5', '85', '92.5', '100', '110', '125',
        /// '150', '175', '200', '250', '300', '400', '500'</param>
        /// <param name="sellerDeclaredValue">Your declaration of the total
        /// value of the inventory in the shipment.</param>
        /// <param name="amazonCalculatedValue">Estimate by Amazon of the total
        /// value of the inventory in the shipment.</param>
        /// <param name="partneredEstimate">The estimated shipping cost using
        /// an Amazon-partnered carrier.</param>
        public PartneredLtlDataOutput(Contact contact, long boxCount, System.DateTime freightReadyDate, IList<Pallet> palletList, Weight totalWeight, System.DateTime previewPickupDate, System.DateTime previewDeliveryDate, string previewFreightClass, string amazonReferenceId, bool isBillOfLadingAvailable, string carrierName, string sellerFreightClass = default(string), Amount sellerDeclaredValue = default(Amount), Amount amazonCalculatedValue = default(Amount), PartneredEstimate partneredEstimate = default(PartneredEstimate))
        {
            Contact = contact;
            BoxCount = boxCount;
            SellerFreightClass = sellerFreightClass;
            FreightReadyDate = freightReadyDate;
            PalletList = palletList;
            TotalWeight = totalWeight;
            SellerDeclaredValue = sellerDeclaredValue;
            AmazonCalculatedValue = amazonCalculatedValue;
            PreviewPickupDate = previewPickupDate;
            PreviewDeliveryDate = previewDeliveryDate;
            PreviewFreightClass = previewFreightClass;
            AmazonReferenceId = amazonReferenceId;
            IsBillOfLadingAvailable = isBillOfLadingAvailable;
            PartneredEstimate = partneredEstimate;
            CarrierName = carrierName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets contact information for the person in the seller's
        /// organization who is responsible for the shipment. Used by the
        /// carrier if they have questions about the shipment.
        /// </summary>
        [JsonProperty(PropertyName = "Contact")]
        public Contact Contact { get; set; }

        /// <summary>
        /// Gets or sets the number of boxes in the shipment.
        /// </summary>
        [JsonProperty(PropertyName = "BoxCount")]
        public long BoxCount { get; set; }

        /// <summary>
        /// Gets or sets possible values include: '50', '55', '60', '65', '70',
        /// '77.5', '85', '92.5', '100', '110', '125', '150', '175', '200',
        /// '250', '300', '400', '500'
        /// </summary>
        [JsonProperty(PropertyName = "SellerFreightClass")]
        public string SellerFreightClass { get; set; }

        /// <summary>
        /// Gets or sets the date that the shipment will be ready to be picked
        /// up by the carrier. Must be in YYYY-MM-DD format.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "FreightReadyDate")]
        public System.DateTime FreightReadyDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PalletList")]
        public IList<Pallet> PalletList { get; set; }

        /// <summary>
        /// Gets or sets the total weight of the shipment.
        /// </summary>
        [JsonProperty(PropertyName = "TotalWeight")]
        public Weight TotalWeight { get; set; }

        /// <summary>
        /// Gets or sets your declaration of the total value of the inventory
        /// in the shipment.
        /// </summary>
        [JsonProperty(PropertyName = "SellerDeclaredValue")]
        public Amount SellerDeclaredValue { get; set; }

        /// <summary>
        /// Gets or sets estimate by Amazon of the total value of the inventory
        /// in the shipment.
        /// </summary>
        [JsonProperty(PropertyName = "AmazonCalculatedValue")]
        public Amount AmazonCalculatedValue { get; set; }

        /// <summary>
        /// Gets or sets the estimated date that the shipment will be picked up
        /// by the carrier, in YYYY-MM-DD format.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "PreviewPickupDate")]
        public System.DateTime PreviewPickupDate { get; set; }

        /// <summary>
        /// Gets or sets the estimated date that the shipment will be delivered
        /// to an Amazon fulfillment center, in YYYY-MM-DD format.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "PreviewDeliveryDate")]
        public System.DateTime PreviewDeliveryDate { get; set; }

        /// <summary>
        /// Gets or sets the freight class of the shipment as estimated by
        /// Amazon if you did not include a freight class when you called the
        /// putTransportDetails operation. Possible values include: '50', '55',
        /// '60', '65', '70', '77.5', '85', '92.5', '100', '110', '125', '150',
        /// '175', '200', '250', '300', '400', '500'
        /// </summary>
        [JsonProperty(PropertyName = "PreviewFreightClass")]
        public string PreviewFreightClass { get; set; }

        /// <summary>
        /// Gets or sets a unique identifier created by Amazon that identifies
        /// this Amazon-partnered, Less Than Truckload/Full Truckload (LTL/FTL)
        /// shipment.
        /// </summary>
        [JsonProperty(PropertyName = "AmazonReferenceId")]
        public string AmazonReferenceId { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the bill of lading for the shipment
        /// is available.
        /// </summary>
        [JsonProperty(PropertyName = "IsBillOfLadingAvailable")]
        public bool IsBillOfLadingAvailable { get; set; }

        /// <summary>
        /// Gets or sets the estimated shipping cost using an Amazon-partnered
        /// carrier.
        /// </summary>
        [JsonProperty(PropertyName = "PartneredEstimate")]
        public PartneredEstimate PartneredEstimate { get; set; }

        /// <summary>
        /// Gets or sets the carrier for the inbound shipment.
        /// </summary>
        [JsonProperty(PropertyName = "CarrierName")]
        public string CarrierName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Contact == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Contact");
            }
            if (PalletList == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PalletList");
            }
            if (TotalWeight == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TotalWeight");
            }
            if (PreviewFreightClass == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PreviewFreightClass");
            }
            if (AmazonReferenceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AmazonReferenceId");
            }
            if (CarrierName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CarrierName");
            }
            if (Contact != null)
            {
                Contact.Validate();
            }
            if (PalletList != null)
            {
                foreach (var element in PalletList)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (TotalWeight != null)
            {
                TotalWeight.Validate();
            }
            if (SellerDeclaredValue != null)
            {
                SellerDeclaredValue.Validate();
            }
            if (AmazonCalculatedValue != null)
            {
                AmazonCalculatedValue.Validate();
            }
            if (PartneredEstimate != null)
            {
                PartneredEstimate.Validate();
            }
        }
    }
}
