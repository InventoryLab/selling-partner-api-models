// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The estimated shipping cost for a shipment using an Amazon-partnered
    /// carrier.
    /// </summary>
    public partial class PartneredEstimate
    {
        /// <summary>
        /// Initializes a new instance of the PartneredEstimate class.
        /// </summary>
        public PartneredEstimate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PartneredEstimate class.
        /// </summary>
        /// <param name="amount">The amount that the Amazon-partnered carrier
        /// will charge to ship the inbound shipment.</param>
        /// <param name="confirmDeadline">The date in ISO 8601 date time format
        /// by which this estimate must be confirmed. After this date the
        /// estimate is no longer valid and cannot be confirmed.
        ///
        /// Returned only if the TransportStatus value of the inbound shipment
        /// is ESTIMATED.</param>
        /// <param name="voidDeadline">The date in ISO 8601 date time format
        /// after which a confirmed transportation request can no longer be
        /// voided. This date is 24 hours after a Small Parcel shipment
        /// transportation request is confirmed or one hour after a Less Than
        /// Truckload/Full Truckload (LTL/FTL) shipment transportation request
        /// is confirmed. After the void deadline passes the seller's account
        /// will be charged for the shipping cost.
        ///
        /// Returned only if the TransportStatus value of the inbound shipment
        /// is CONFIRMED.</param>
        public PartneredEstimate(Amount amount, System.DateTime? confirmDeadline = default(System.DateTime?), System.DateTime? voidDeadline = default(System.DateTime?))
        {
            Amount = amount;
            ConfirmDeadline = confirmDeadline;
            VoidDeadline = voidDeadline;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the amount that the Amazon-partnered carrier will
        /// charge to ship the inbound shipment.
        /// </summary>
        [JsonProperty(PropertyName = "Amount")]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or sets the date in ISO 8601 date time format by which this
        /// estimate must be confirmed. After this date the estimate is no
        /// longer valid and cannot be confirmed.
        ///
        /// Returned only if the TransportStatus value of the inbound shipment
        /// is ESTIMATED.
        /// </summary>
        [JsonProperty(PropertyName = "ConfirmDeadline")]
        public System.DateTime? ConfirmDeadline { get; set; }

        /// <summary>
        /// Gets or sets the date in ISO 8601 date time format after which a
        /// confirmed transportation request can no longer be voided. This date
        /// is 24 hours after a Small Parcel shipment transportation request is
        /// confirmed or one hour after a Less Than Truckload/Full Truckload
        /// (LTL/FTL) shipment transportation request is confirmed. After the
        /// void deadline passes the seller's account will be charged for the
        /// shipping cost.
        ///
        /// Returned only if the TransportStatus value of the inbound shipment
        /// is CONFIRMED.
        /// </summary>
        [JsonProperty(PropertyName = "VoidDeadline")]
        public System.DateTime? VoidDeadline { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Amount == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Amount");
            }
            if (Amount != null)
            {
                Amount.Validate();
            }
        }
    }
}
