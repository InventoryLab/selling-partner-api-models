// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Inbound shipment information, including carrier details, shipment
    /// status, and the workflow status for a request for shipment with an
    /// Amazon-partnered carrier.
    /// </summary>
    public partial class TransportContent
    {
        /// <summary>
        /// Initializes a new instance of the TransportContent class.
        /// </summary>
        public TransportContent()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TransportContent class.
        /// </summary>
        public TransportContent(TransportHeader transportHeader, TransportDetailOutput transportDetails, TransportResult transportResult)
        {
            TransportHeader = transportHeader;
            TransportDetails = transportDetails;
            TransportResult = transportResult;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TransportHeader")]
        public TransportHeader TransportHeader { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TransportDetails")]
        public TransportDetailOutput TransportDetails { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TransportResult")]
        public TransportResult TransportResult { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TransportHeader == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TransportHeader");
            }
            if (TransportDetails == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TransportDetails");
            }
            if (TransportResult == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TransportResult");
            }
            if (TransportHeader != null)
            {
                TransportHeader.Validate();
            }
            if (TransportDetails != null)
            {
                TransportDetails.Validate();
            }
            if (TransportResult != null)
            {
                TransportResult.Validate();
            }
        }
    }
}
