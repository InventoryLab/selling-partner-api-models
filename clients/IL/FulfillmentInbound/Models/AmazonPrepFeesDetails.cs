// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The fees for Amazon to prep goods for shipment.
    /// </summary>
    public partial class AmazonPrepFeesDetails
    {
        /// <summary>
        /// Initializes a new instance of the AmazonPrepFeesDetails class.
        /// </summary>
        public AmazonPrepFeesDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AmazonPrepFeesDetails class.
        /// </summary>
        /// <param name="prepInstruction">Possible values include:
        /// 'Polybagging', 'BubbleWrapping', 'Taping', 'BlackShrinkWrapping',
        /// 'Labeling', 'HangGarment'</param>
        /// <param name="feePerUnit">The fee for Amazon to prepare 1
        /// unit.</param>
        public AmazonPrepFeesDetails(string prepInstruction = default(string), Amount feePerUnit = default(Amount))
        {
            PrepInstruction = prepInstruction;
            FeePerUnit = feePerUnit;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Polybagging',
        /// 'BubbleWrapping', 'Taping', 'BlackShrinkWrapping', 'Labeling',
        /// 'HangGarment'
        /// </summary>
        [JsonProperty(PropertyName = "PrepInstruction")]
        public string PrepInstruction { get; set; }

        /// <summary>
        /// Gets or sets the fee for Amazon to prepare 1 unit.
        /// </summary>
        [JsonProperty(PropertyName = "FeePerUnit")]
        public Amount FeePerUnit { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FeePerUnit != null)
            {
                FeePerUnit.Validate();
            }
        }
    }
}
