// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information that is required by an Amazon-partnered carrier to ship a
    /// Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.
    /// </summary>
    public partial class PartneredLtlDataInput
    {
        /// <summary>
        /// Initializes a new instance of the PartneredLtlDataInput class.
        /// </summary>
        public PartneredLtlDataInput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PartneredLtlDataInput class.
        /// </summary>
        /// <param name="contact">Contact information for the person in the
        /// seller's organization who is responsible for the shipment. Used by
        /// the carrier if they have questions about the shipment.</param>
        /// <param name="boxCount">The number of boxes in the shipment.</param>
        /// <param name="sellerFreightClass">Possible values include: '50',
        /// '55', '60', '65', '70', '77.5', '85', '92.5', '100', '110', '125',
        /// '150', '175', '200', '250', '300', '400', '500'</param>
        /// <param name="freightReadyDate">The date that the shipment will be
        /// ready to be picked up by the carrier.</param>
        /// <param name="totalWeight">The total weight of the shipment.</param>
        /// <param name="sellerDeclaredValue">The declaration of the total
        /// value of the inventory in the shipment.</param>
        public PartneredLtlDataInput(Contact contact = default(Contact), long? boxCount = default(long?), string sellerFreightClass = default(string), System.DateTime? freightReadyDate = default(System.DateTime?), IList<Pallet> palletList = default(IList<Pallet>), Weight totalWeight = default(Weight), Amount sellerDeclaredValue = default(Amount))
        {
            Contact = contact;
            BoxCount = boxCount;
            SellerFreightClass = sellerFreightClass;
            FreightReadyDate = freightReadyDate;
            PalletList = palletList;
            TotalWeight = totalWeight;
            SellerDeclaredValue = sellerDeclaredValue;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets contact information for the person in the seller's
        /// organization who is responsible for the shipment. Used by the
        /// carrier if they have questions about the shipment.
        /// </summary>
        [JsonProperty(PropertyName = "Contact")]
        public Contact Contact { get; set; }

        /// <summary>
        /// Gets or sets the number of boxes in the shipment.
        /// </summary>
        [JsonProperty(PropertyName = "BoxCount")]
        public long? BoxCount { get; set; }

        /// <summary>
        /// Gets or sets possible values include: '50', '55', '60', '65', '70',
        /// '77.5', '85', '92.5', '100', '110', '125', '150', '175', '200',
        /// '250', '300', '400', '500'
        /// </summary>
        [JsonProperty(PropertyName = "SellerFreightClass")]
        public string SellerFreightClass { get; set; }

        /// <summary>
        /// Gets or sets the date that the shipment will be ready to be picked
        /// up by the carrier.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "FreightReadyDate")]
        public System.DateTime? FreightReadyDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PalletList")]
        public IList<Pallet> PalletList { get; set; }

        /// <summary>
        /// Gets or sets the total weight of the shipment.
        /// </summary>
        [JsonProperty(PropertyName = "TotalWeight")]
        public Weight TotalWeight { get; set; }

        /// <summary>
        /// Gets or sets the declaration of the total value of the inventory in
        /// the shipment.
        /// </summary>
        [JsonProperty(PropertyName = "SellerDeclaredValue")]
        public Amount SellerDeclaredValue { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Contact != null)
            {
                Contact.Validate();
            }
            if (PalletList != null)
            {
                foreach (var element in PalletList)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (TotalWeight != null)
            {
                TotalWeight.Validate();
            }
            if (SellerDeclaredValue != null)
            {
                SellerDeclaredValue.Validate();
            }
        }
    }
}
