// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Inbound shipment information used to create and update inbound
    /// shipments.
    /// </summary>
    public partial class InboundShipmentHeader
    {
        /// <summary>
        /// Initializes a new instance of the InboundShipmentHeader class.
        /// </summary>
        public InboundShipmentHeader()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InboundShipmentHeader class.
        /// </summary>
        /// <param name="shipmentName">The name for the shipment. Use a naming
        /// convention that helps distinguish between shipments over time, such
        /// as the date the shipment was created.</param>
        /// <param name="shipFromAddress">The return address.</param>
        /// <param name="destinationFulfillmentCenterId">The identifier for the
        /// fulfillment center to which the shipment will be shipped. Get this
        /// value from the InboundShipmentPlan object in the response returned
        /// by the createInboundShipmentPlan operation.</param>
        /// <param name="shipmentStatus">Possible values include: 'WORKING',
        /// 'SHIPPED', 'RECEIVING', 'CANCELLED', 'DELETED', 'CLOSED', 'ERROR',
        /// 'IN_TRANSIT', 'DELIVERED', 'CHECKED_IN'</param>
        /// <param name="labelPrepPreference">The preference for label
        /// preparation for an inbound shipment. Possible values include:
        /// 'SELLER_LABEL', 'AMAZON_LABEL_ONLY',
        /// 'AMAZON_LABEL_PREFERRED'</param>
        /// <param name="areCasesRequired">Indicates whether or not an inbound
        /// shipment contains case-packed boxes. Note: A shipment must contain
        /// either all case-packed boxes or all individually packed boxes.
        ///
        /// Possible values:
        ///
        /// true - All boxes in the shipment must be case packed.
        ///
        /// false - All boxes in the shipment must be individually packed.
        ///
        /// Note: If AreCasesRequired = true for an inbound shipment, then the
        /// value of QuantityInCase must be greater than zero for every item in
        /// the shipment. Otherwise the service returns an error.</param>
        /// <param name="intendedBoxContentsSource">Possible values include:
        /// 'NONE', 'FEED', '2D_BARCODE'</param>
        public InboundShipmentHeader(string shipmentName, Address shipFromAddress, string destinationFulfillmentCenterId, string shipmentStatus, string labelPrepPreference, bool? areCasesRequired = default(bool?), string intendedBoxContentsSource = default(string))
        {
            ShipmentName = shipmentName;
            ShipFromAddress = shipFromAddress;
            DestinationFulfillmentCenterId = destinationFulfillmentCenterId;
            AreCasesRequired = areCasesRequired;
            ShipmentStatus = shipmentStatus;
            LabelPrepPreference = labelPrepPreference;
            IntendedBoxContentsSource = intendedBoxContentsSource;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name for the shipment. Use a naming convention
        /// that helps distinguish between shipments over time, such as the
        /// date the shipment was created.
        /// </summary>
        [JsonProperty(PropertyName = "ShipmentName")]
        public string ShipmentName { get; set; }

        /// <summary>
        /// Gets or sets the return address.
        /// </summary>
        [JsonProperty(PropertyName = "ShipFromAddress")]
        public Address ShipFromAddress { get; set; }

        /// <summary>
        /// Gets or sets the identifier for the fulfillment center to which the
        /// shipment will be shipped. Get this value from the
        /// InboundShipmentPlan object in the response returned by the
        /// createInboundShipmentPlan operation.
        /// </summary>
        [JsonProperty(PropertyName = "DestinationFulfillmentCenterId")]
        public string DestinationFulfillmentCenterId { get; set; }

        /// <summary>
        /// Gets or sets indicates whether or not an inbound shipment contains
        /// case-packed boxes. Note: A shipment must contain either all
        /// case-packed boxes or all individually packed boxes.
        ///
        /// Possible values:
        ///
        /// true - All boxes in the shipment must be case packed.
        ///
        /// false - All boxes in the shipment must be individually packed.
        ///
        /// Note: If AreCasesRequired = true for an inbound shipment, then the
        /// value of QuantityInCase must be greater than zero for every item in
        /// the shipment. Otherwise the service returns an error.
        /// </summary>
        [JsonProperty(PropertyName = "AreCasesRequired")]
        public bool? AreCasesRequired { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'WORKING', 'SHIPPED',
        /// 'RECEIVING', 'CANCELLED', 'DELETED', 'CLOSED', 'ERROR',
        /// 'IN_TRANSIT', 'DELIVERED', 'CHECKED_IN'
        /// </summary>
        [JsonProperty(PropertyName = "ShipmentStatus")]
        public string ShipmentStatus { get; set; }

        /// <summary>
        /// Gets or sets the preference for label preparation for an inbound
        /// shipment. Possible values include: 'SELLER_LABEL',
        /// 'AMAZON_LABEL_ONLY', 'AMAZON_LABEL_PREFERRED'
        /// </summary>
        [JsonProperty(PropertyName = "LabelPrepPreference")]
        public string LabelPrepPreference { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NONE', 'FEED', '2D_BARCODE'
        /// </summary>
        [JsonProperty(PropertyName = "IntendedBoxContentsSource")]
        public string IntendedBoxContentsSource { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ShipmentName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ShipmentName");
            }
            if (ShipFromAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ShipFromAddress");
            }
            if (DestinationFulfillmentCenterId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DestinationFulfillmentCenterId");
            }
            if (ShipmentStatus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ShipmentStatus");
            }
            if (LabelPrepPreference == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LabelPrepPreference");
            }
            if (ShipFromAddress != null)
            {
                ShipFromAddress.Validate();
            }
        }
    }
}
