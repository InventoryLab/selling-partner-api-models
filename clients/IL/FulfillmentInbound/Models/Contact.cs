// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Contact information for the person in the seller's organization who is
    /// responsible for a Less Than Truckload/Full Truckload (LTL/FTL)
    /// shipment.
    /// </summary>
    public partial class Contact
    {
        /// <summary>
        /// Initializes a new instance of the Contact class.
        /// </summary>
        public Contact()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Contact class.
        /// </summary>
        /// <param name="name">The name of the contact person.</param>
        /// <param name="phone">The phone number of the contact person.</param>
        /// <param name="email">The email address of the contact
        /// person.</param>
        /// <param name="fax">The fax number of the contact person.</param>
        public Contact(string name, string phone, string email, string fax = default(string))
        {
            Name = name;
            Phone = phone;
            Email = email;
            Fax = fax;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the contact person.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the phone number of the contact person.
        /// </summary>
        [JsonProperty(PropertyName = "Phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or sets the email address of the contact person.
        /// </summary>
        [JsonProperty(PropertyName = "Email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets the fax number of the contact person.
        /// </summary>
        [JsonProperty(PropertyName = "Fax")]
        public string Fax { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Phone == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Phone");
            }
            if (Email == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Email");
            }
            if (Name != null)
            {
                if (Name.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 50);
                }
            }
            if (Phone != null)
            {
                if (Phone.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Phone", 20);
                }
            }
            if (Email != null)
            {
                if (Email.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Email", 50);
                }
            }
            if (Fax != null)
            {
                if (Fax.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Fax", 20);
                }
            }
        }
    }
}
