// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Inbound shipment information used to create an inbound shipment.
    /// Returned by the createInboundShipmentPlan operation.
    /// </summary>
    public partial class InboundShipmentPlan
    {
        /// <summary>
        /// Initializes a new instance of the InboundShipmentPlan class.
        /// </summary>
        public InboundShipmentPlan()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InboundShipmentPlan class.
        /// </summary>
        /// <param name="shipmentId">A shipment identifier originally returned
        /// by the createInboundShipmentPlan operation.</param>
        /// <param name="destinationFulfillmentCenterId">An Amazon fulfillment
        /// center identifier created by Amazon.</param>
        /// <param name="shipToAddress">The address of the Amazon fulfillment
        /// center to which to ship the items.</param>
        /// <param name="labelPrepType">Possible values include: 'NO_LABEL',
        /// 'SELLER_LABEL', 'AMAZON_LABEL'</param>
        /// <param name="items">SKU and quantity information for the items in
        /// the shipment.</param>
        public InboundShipmentPlan(string shipmentId, string destinationFulfillmentCenterId, Address shipToAddress, string labelPrepType, IList<InboundShipmentPlanItem> items, BoxContentsFeeDetails estimatedBoxContentsFee = default(BoxContentsFeeDetails))
        {
            ShipmentId = shipmentId;
            DestinationFulfillmentCenterId = destinationFulfillmentCenterId;
            ShipToAddress = shipToAddress;
            LabelPrepType = labelPrepType;
            Items = items;
            EstimatedBoxContentsFee = estimatedBoxContentsFee;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a shipment identifier originally returned by the
        /// createInboundShipmentPlan operation.
        /// </summary>
        [JsonProperty(PropertyName = "ShipmentId")]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Gets or sets an Amazon fulfillment center identifier created by
        /// Amazon.
        /// </summary>
        [JsonProperty(PropertyName = "DestinationFulfillmentCenterId")]
        public string DestinationFulfillmentCenterId { get; set; }

        /// <summary>
        /// Gets or sets the address of the Amazon fulfillment center to which
        /// to ship the items.
        /// </summary>
        [JsonProperty(PropertyName = "ShipToAddress")]
        public Address ShipToAddress { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NO_LABEL', 'SELLER_LABEL',
        /// 'AMAZON_LABEL'
        /// </summary>
        [JsonProperty(PropertyName = "LabelPrepType")]
        public string LabelPrepType { get; set; }

        /// <summary>
        /// Gets or sets SKU and quantity information for the items in the
        /// shipment.
        /// </summary>
        [JsonProperty(PropertyName = "Items")]
        public IList<InboundShipmentPlanItem> Items { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EstimatedBoxContentsFee")]
        public BoxContentsFeeDetails EstimatedBoxContentsFee { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ShipmentId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ShipmentId");
            }
            if (DestinationFulfillmentCenterId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DestinationFulfillmentCenterId");
            }
            if (ShipToAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ShipToAddress");
            }
            if (LabelPrepType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LabelPrepType");
            }
            if (Items == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Items");
            }
            if (ShipToAddress != null)
            {
                ShipToAddress.Validate();
            }
            if (Items != null)
            {
                foreach (var element in Items)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (EstimatedBoxContentsFee != null)
            {
                EstimatedBoxContentsFee.Validate();
            }
        }
    }
}
