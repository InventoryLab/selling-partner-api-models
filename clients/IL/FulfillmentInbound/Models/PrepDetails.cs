// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Preparation instructions and who is responsible for the preparation.
    /// </summary>
    public partial class PrepDetails
    {
        /// <summary>
        /// Initializes a new instance of the PrepDetails class.
        /// </summary>
        public PrepDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PrepDetails class.
        /// </summary>
        /// <param name="prepInstruction">Possible values include:
        /// 'Polybagging', 'BubbleWrapping', 'Taping', 'BlackShrinkWrapping',
        /// 'Labeling', 'HangGarment'</param>
        /// <param name="prepOwner">Possible values include: 'AMAZON',
        /// 'SELLER'</param>
        public PrepDetails(string prepInstruction, string prepOwner)
        {
            PrepInstruction = prepInstruction;
            PrepOwner = prepOwner;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'Polybagging',
        /// 'BubbleWrapping', 'Taping', 'BlackShrinkWrapping', 'Labeling',
        /// 'HangGarment'
        /// </summary>
        [JsonProperty(PropertyName = "PrepInstruction")]
        public string PrepInstruction { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'AMAZON', 'SELLER'
        /// </summary>
        [JsonProperty(PropertyName = "PrepOwner")]
        public string PrepOwner { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PrepInstruction == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrepInstruction");
            }
            if (PrepOwner == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PrepOwner");
            }
        }
    }
}
