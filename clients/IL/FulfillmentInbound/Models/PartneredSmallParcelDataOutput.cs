// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Information returned by Amazon about a Small Parcel shipment by an
    /// Amazon-partnered carrier.
    /// </summary>
    public partial class PartneredSmallParcelDataOutput
    {
        /// <summary>
        /// Initializes a new instance of the PartneredSmallParcelDataOutput
        /// class.
        /// </summary>
        public PartneredSmallParcelDataOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PartneredSmallParcelDataOutput
        /// class.
        /// </summary>
        public PartneredSmallParcelDataOutput(IList<PartneredSmallParcelPackageOutput> packageList, PartneredEstimate partneredEstimate = default(PartneredEstimate))
        {
            PackageList = packageList;
            PartneredEstimate = partneredEstimate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PackageList")]
        public IList<PartneredSmallParcelPackageOutput> PackageList { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PartneredEstimate")]
        public PartneredEstimate PartneredEstimate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PackageList == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PackageList");
            }
            if (PackageList != null)
            {
                foreach (var element in PackageList)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (PartneredEstimate != null)
            {
                PartneredEstimate.Validate();
            }
        }
    }
}
