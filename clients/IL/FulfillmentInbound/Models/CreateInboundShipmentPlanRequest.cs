// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The request schema for the createInboundShipmentPlan operation.
    /// </summary>
    public partial class CreateInboundShipmentPlanRequest
    {
        /// <summary>
        /// Initializes a new instance of the CreateInboundShipmentPlanRequest
        /// class.
        /// </summary>
        public CreateInboundShipmentPlanRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreateInboundShipmentPlanRequest
        /// class.
        /// </summary>
        /// <param name="shipFromAddress">The address from which the inbound
        /// shipment will be sent.</param>
        /// <param name="labelPrepPreference">The seller's preference for label
        /// preparation for an inbound shipment. Possible values include:
        /// 'SELLER_LABEL', 'AMAZON_LABEL_ONLY',
        /// 'AMAZON_LABEL_PREFERRED'</param>
        /// <param name="shipToCountryCode">The two-character country code for
        /// the country where the inbound shipment is to be sent.
        ///
        /// Note: Not required. Specifying both ShipToCountryCode and
        /// ShipToCountrySubdivisionCode returns an error.
        ///
        /// Values:
        ///
        /// ShipToCountryCode values for North America:
        /// * CA – Canada
        /// * MX - Mexico
        /// * US - United States
        ///
        /// ShipToCountryCode values for MCI sellers in Europe:
        /// * DE – Germany
        /// * ES – Spain
        /// * FR – France
        /// * GB – United Kingdom
        /// * IT – Italy
        ///
        /// Default: The country code for the seller's home
        /// marketplace.</param>
        /// <param name="shipToCountrySubdivisionCode">The two-character
        /// country code, followed by a dash and then up to three characters
        /// that represent the subdivision of the country where the inbound
        /// shipment is to be sent. For example, "IN-MH". In full ISO 3166-2
        /// format.
        ///
        /// Note: Not required. Specifying both ShipToCountryCode and
        /// ShipToCountrySubdivisionCode returns an error.</param>
        public CreateInboundShipmentPlanRequest(Address shipFromAddress, string labelPrepPreference, IList<InboundShipmentPlanRequestItem> inboundShipmentPlanRequestItems, string shipToCountryCode = default(string), string shipToCountrySubdivisionCode = default(string))
        {
            ShipFromAddress = shipFromAddress;
            LabelPrepPreference = labelPrepPreference;
            ShipToCountryCode = shipToCountryCode;
            ShipToCountrySubdivisionCode = shipToCountrySubdivisionCode;
            InboundShipmentPlanRequestItems = inboundShipmentPlanRequestItems;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the address from which the inbound shipment will be
        /// sent.
        /// </summary>
        [JsonProperty(PropertyName = "ShipFromAddress")]
        public Address ShipFromAddress { get; set; }

        /// <summary>
        /// Gets or sets the seller's preference for label preparation for an
        /// inbound shipment. Possible values include: 'SELLER_LABEL',
        /// 'AMAZON_LABEL_ONLY', 'AMAZON_LABEL_PREFERRED'
        /// </summary>
        [JsonProperty(PropertyName = "LabelPrepPreference")]
        public string LabelPrepPreference { get; set; }

        /// <summary>
        /// Gets or sets the two-character country code for the country where
        /// the inbound shipment is to be sent.
        ///
        /// Note: Not required. Specifying both ShipToCountryCode and
        /// ShipToCountrySubdivisionCode returns an error.
        ///
        /// Values:
        ///
        /// ShipToCountryCode values for North America:
        /// * CA – Canada
        /// * MX - Mexico
        /// * US - United States
        ///
        /// ShipToCountryCode values for MCI sellers in Europe:
        /// * DE – Germany
        /// * ES – Spain
        /// * FR – France
        /// * GB – United Kingdom
        /// * IT – Italy
        ///
        /// Default: The country code for the seller's home marketplace.
        /// </summary>
        [JsonProperty(PropertyName = "ShipToCountryCode")]
        public string ShipToCountryCode { get; set; }

        /// <summary>
        /// Gets or sets the two-character country code, followed by a dash and
        /// then up to three characters that represent the subdivision of the
        /// country where the inbound shipment is to be sent. For example,
        /// "IN-MH". In full ISO 3166-2 format.
        ///
        /// Note: Not required. Specifying both ShipToCountryCode and
        /// ShipToCountrySubdivisionCode returns an error.
        /// </summary>
        [JsonProperty(PropertyName = "ShipToCountrySubdivisionCode")]
        public string ShipToCountrySubdivisionCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "InboundShipmentPlanRequestItems")]
        public IList<InboundShipmentPlanRequestItem> InboundShipmentPlanRequestItems { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ShipFromAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ShipFromAddress");
            }
            if (LabelPrepPreference == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LabelPrepPreference");
            }
            if (InboundShipmentPlanRequestItems == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "InboundShipmentPlanRequestItems");
            }
            if (ShipFromAddress != null)
            {
                ShipFromAddress.Validate();
            }
            if (InboundShipmentPlanRequestItems != null)
            {
                foreach (var element in InboundShipmentPlanRequestItems)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
