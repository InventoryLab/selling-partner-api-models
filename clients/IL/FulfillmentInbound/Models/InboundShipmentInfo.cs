// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Information about the seller's inbound shipments. Returned by the
    /// listInboundShipments operation.
    /// </summary>
    public partial class InboundShipmentInfo
    {
        /// <summary>
        /// Initializes a new instance of the InboundShipmentInfo class.
        /// </summary>
        public InboundShipmentInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InboundShipmentInfo class.
        /// </summary>
        /// <param name="shipFromAddress">The return address.</param>
        /// <param name="areCasesRequired">Indicates whether or not an inbound
        /// shipment contains case-packed boxes. When AreCasesRequired = true
        /// for an inbound shipment, all items in the inbound shipment must be
        /// case packed.</param>
        /// <param name="shipmentId">The shipment identifier submitted in the
        /// request.</param>
        /// <param name="shipmentName">The name for the inbound
        /// shipment.</param>
        /// <param name="destinationFulfillmentCenterId">An Amazon fulfillment
        /// center identifier created by Amazon.</param>
        /// <param name="shipmentStatus">Possible values include: 'WORKING',
        /// 'SHIPPED', 'RECEIVING', 'CANCELLED', 'DELETED', 'CLOSED', 'ERROR',
        /// 'IN_TRANSIT', 'DELIVERED', 'CHECKED_IN'</param>
        /// <param name="labelPrepType">Possible values include: 'NO_LABEL',
        /// 'SELLER_LABEL', 'AMAZON_LABEL'</param>
        /// <param name="confirmedNeedByDate">Date by which the shipment must
        /// arrive at the Amazon fulfillment center to avoid delivery promise
        /// breaks for pre-ordered items.</param>
        /// <param name="boxContentsSource">Possible values include: 'NONE',
        /// 'FEED', '2D_BARCODE', 'INTERACTIVE'</param>
        /// <param name="estimatedBoxContentsFee">An estimate of the manual
        /// processing fee charged by Amazon for boxes without box content
        /// information. This is only returned when BoxContentsSource is
        /// NONE.</param>
        public InboundShipmentInfo(Address shipFromAddress, bool areCasesRequired, string shipmentId = default(string), string shipmentName = default(string), string destinationFulfillmentCenterId = default(string), string shipmentStatus = default(string), string labelPrepType = default(string), System.DateTime? confirmedNeedByDate = default(System.DateTime?), string boxContentsSource = default(string), BoxContentsFeeDetails estimatedBoxContentsFee = default(BoxContentsFeeDetails))
        {
            ShipmentId = shipmentId;
            ShipmentName = shipmentName;
            ShipFromAddress = shipFromAddress;
            DestinationFulfillmentCenterId = destinationFulfillmentCenterId;
            ShipmentStatus = shipmentStatus;
            LabelPrepType = labelPrepType;
            AreCasesRequired = areCasesRequired;
            ConfirmedNeedByDate = confirmedNeedByDate;
            BoxContentsSource = boxContentsSource;
            EstimatedBoxContentsFee = estimatedBoxContentsFee;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the shipment identifier submitted in the request.
        /// </summary>
        [JsonProperty(PropertyName = "ShipmentId")]
        public string ShipmentId { get; set; }

        /// <summary>
        /// Gets or sets the name for the inbound shipment.
        /// </summary>
        [JsonProperty(PropertyName = "ShipmentName")]
        public string ShipmentName { get; set; }

        /// <summary>
        /// Gets or sets the return address.
        /// </summary>
        [JsonProperty(PropertyName = "ShipFromAddress")]
        public Address ShipFromAddress { get; set; }

        /// <summary>
        /// Gets or sets an Amazon fulfillment center identifier created by
        /// Amazon.
        /// </summary>
        [JsonProperty(PropertyName = "DestinationFulfillmentCenterId")]
        public string DestinationFulfillmentCenterId { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'WORKING', 'SHIPPED',
        /// 'RECEIVING', 'CANCELLED', 'DELETED', 'CLOSED', 'ERROR',
        /// 'IN_TRANSIT', 'DELIVERED', 'CHECKED_IN'
        /// </summary>
        [JsonProperty(PropertyName = "ShipmentStatus")]
        public string ShipmentStatus { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NO_LABEL', 'SELLER_LABEL',
        /// 'AMAZON_LABEL'
        /// </summary>
        [JsonProperty(PropertyName = "LabelPrepType")]
        public string LabelPrepType { get; set; }

        /// <summary>
        /// Gets or sets indicates whether or not an inbound shipment contains
        /// case-packed boxes. When AreCasesRequired = true for an inbound
        /// shipment, all items in the inbound shipment must be case packed.
        /// </summary>
        [JsonProperty(PropertyName = "AreCasesRequired")]
        public bool AreCasesRequired { get; set; }

        /// <summary>
        /// Gets or sets date by which the shipment must arrive at the Amazon
        /// fulfillment center to avoid delivery promise breaks for pre-ordered
        /// items.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "ConfirmedNeedByDate")]
        public System.DateTime? ConfirmedNeedByDate { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NONE', 'FEED', '2D_BARCODE',
        /// 'INTERACTIVE'
        /// </summary>
        [JsonProperty(PropertyName = "BoxContentsSource")]
        public string BoxContentsSource { get; set; }

        /// <summary>
        /// Gets or sets an estimate of the manual processing fee charged by
        /// Amazon for boxes without box content information. This is only
        /// returned when BoxContentsSource is NONE.
        /// </summary>
        [JsonProperty(PropertyName = "EstimatedBoxContentsFee")]
        public BoxContentsFeeDetails EstimatedBoxContentsFee { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ShipFromAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ShipFromAddress");
            }
            if (ShipFromAddress != null)
            {
                ShipFromAddress.Validate();
            }
            if (EstimatedBoxContentsFee != null)
            {
                EstimatedBoxContentsFee.Validate();
            }
        }
    }
}
