// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FulfillmentInboundClient.
    /// </summary>
    public static partial class FulfillmentInboundClientExtensions
    {
            /// <summary>
            /// Returns information that lets a seller know if Amazon recommends sending an
            /// item to a given marketplace. In some cases, Amazon provides guidance for
            /// why a given SellerSKU or ASIN is not recommended for shipment to Amazon's
            /// fulfillment network. Sellers may still ship items that are not recommended,
            /// at their discretion.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace where the product would
            /// be stored.
            /// </param>
            /// <param name='sellerSKUList'>
            /// A list of SellerSKU values. Used to identify items for which you want
            /// inbound guidance for shipment to Amazon's fulfillment network. Note:
            /// SellerSKU is qualified by the SellerId, which is included with every
            /// Selling Partner API operation that you submit. If you specify a SellerSKU
            /// that identifies a variation parent ASIN, this operation returns an error. A
            /// variation parent ASIN represents a generic product that cannot be sold.
            /// Variation child ASINs represent products that have specific characteristics
            /// (such as size and color) and can be sold.
            /// </param>
            /// <param name='aSINList'>
            /// A list of ASIN values. Used to identify items for which you want inbound
            /// guidance for shipment to Amazon's fulfillment network. Note: If you specify
            /// a ASIN that identifies a variation parent ASIN, this operation returns an
            /// error. A variation parent ASIN represents a generic product that cannot be
            /// sold. Variation child ASINs represent products that have specific
            /// characteristics (such as size and color) and can be sold.
            /// </param>
            public static GetInboundGuidanceResponse GetInboundGuidance(this IFulfillmentInboundClient operations, string marketplaceId, IList<string> sellerSKUList = default(IList<string>), IList<string> aSINList = default(IList<string>))
            {
                return operations.GetInboundGuidanceAsync(marketplaceId, sellerSKUList, aSINList).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns information that lets a seller know if Amazon recommends sending an
            /// item to a given marketplace. In some cases, Amazon provides guidance for
            /// why a given SellerSKU or ASIN is not recommended for shipment to Amazon's
            /// fulfillment network. Sellers may still ship items that are not recommended,
            /// at their discretion.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace where the product would
            /// be stored.
            /// </param>
            /// <param name='sellerSKUList'>
            /// A list of SellerSKU values. Used to identify items for which you want
            /// inbound guidance for shipment to Amazon's fulfillment network. Note:
            /// SellerSKU is qualified by the SellerId, which is included with every
            /// Selling Partner API operation that you submit. If you specify a SellerSKU
            /// that identifies a variation parent ASIN, this operation returns an error. A
            /// variation parent ASIN represents a generic product that cannot be sold.
            /// Variation child ASINs represent products that have specific characteristics
            /// (such as size and color) and can be sold.
            /// </param>
            /// <param name='aSINList'>
            /// A list of ASIN values. Used to identify items for which you want inbound
            /// guidance for shipment to Amazon's fulfillment network. Note: If you specify
            /// a ASIN that identifies a variation parent ASIN, this operation returns an
            /// error. A variation parent ASIN represents a generic product that cannot be
            /// sold. Variation child ASINs represent products that have specific
            /// characteristics (such as size and color) and can be sold.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetInboundGuidanceResponse> GetInboundGuidanceAsync(this IFulfillmentInboundClient operations, string marketplaceId, IList<string> sellerSKUList = default(IList<string>), IList<string> aSINList = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInboundGuidanceWithHttpMessagesAsync(marketplaceId, sellerSKUList, aSINList, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns one or more inbound shipment plans, which provide the information
            /// you need to create one or more inbound shipments for a set of items that
            /// you specify. Multiple inbound shipment plans might be required so that
            /// items can be optimally placed in Amazon's fulfillment network—for example,
            /// positioning inventory closer to the customer. Alternatively, two inbound
            /// shipment plans might be created with the same Amazon fulfillment center
            /// destination if the two shipment plans require different processing—for
            /// example, items that require labels must be shipped separately from
            /// stickerless, commingled inventory.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static CreateInboundShipmentPlanResponse CreateInboundShipmentPlan(this IFulfillmentInboundClient operations, CreateInboundShipmentPlanRequest body)
            {
                return operations.CreateInboundShipmentPlanAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns one or more inbound shipment plans, which provide the information
            /// you need to create one or more inbound shipments for a set of items that
            /// you specify. Multiple inbound shipment plans might be required so that
            /// items can be optimally placed in Amazon's fulfillment network—for example,
            /// positioning inventory closer to the customer. Alternatively, two inbound
            /// shipment plans might be created with the same Amazon fulfillment center
            /// destination if the two shipment plans require different processing—for
            /// example, items that require labels must be shipped separately from
            /// stickerless, commingled inventory.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateInboundShipmentPlanResponse> CreateInboundShipmentPlanAsync(this IFulfillmentInboundClient operations, CreateInboundShipmentPlanRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateInboundShipmentPlanWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a new inbound shipment based on the specified shipmentId that was
            /// returned by the createInboundShipmentPlan operation.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            public static InboundShipmentResponse CreateInboundShipment(this IFulfillmentInboundClient operations, InboundShipmentRequest body, string shipmentId)
            {
                return operations.CreateInboundShipmentAsync(body, shipmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a new inbound shipment based on the specified shipmentId that was
            /// returned by the createInboundShipmentPlan operation.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InboundShipmentResponse> CreateInboundShipmentAsync(this IFulfillmentInboundClient operations, InboundShipmentRequest body, string shipmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateInboundShipmentWithHttpMessagesAsync(body, shipmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates or removes items from the inbound shipment identified by the
            /// specified shipment identifier. Adding new items is not supported.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            public static InboundShipmentResponse UpdateInboundShipment(this IFulfillmentInboundClient operations, InboundShipmentRequest body, string shipmentId)
            {
                return operations.UpdateInboundShipmentAsync(body, shipmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates or removes items from the inbound shipment identified by the
            /// specified shipment identifier. Adding new items is not supported.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<InboundShipmentResponse> UpdateInboundShipmentAsync(this IFulfillmentInboundClient operations, InboundShipmentRequest body, string shipmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateInboundShipmentWithHttpMessagesAsync(body, shipmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns pre-order information, including dates, that a seller needs before
            /// confirming a shipment for pre-order.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace the shipment is tied
            /// to.
            /// </param>
            public static GetPreorderInfoResponse GetPreorderInfo(this IFulfillmentInboundClient operations, string shipmentId, string marketplaceId)
            {
                return operations.GetPreorderInfoAsync(shipmentId, marketplaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns pre-order information, including dates, that a seller needs before
            /// confirming a shipment for pre-order.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace the shipment is tied
            /// to.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetPreorderInfoResponse> GetPreorderInfoAsync(this IFulfillmentInboundClient operations, string shipmentId, string marketplaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPreorderInfoWithHttpMessagesAsync(shipmentId, marketplaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns information needed to confirm a shipment for pre-order. Call this
            /// operation after calling the getPreorderInfo operation to get the NeedByDate
            /// value and other pre-order information about the shipment.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='needByDate'>
            /// Date that the shipment must arrive at the Amazon fulfillment center to
            /// avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD
            /// format. The response to the getPreorderInfo operation returns this value.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace the shipment is tied
            /// to.
            /// </param>
            public static ConfirmPreorderResponse ConfirmPreorder(this IFulfillmentInboundClient operations, string shipmentId, System.DateTime needByDate, string marketplaceId)
            {
                return operations.ConfirmPreorderAsync(shipmentId, needByDate, marketplaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns information needed to confirm a shipment for pre-order. Call this
            /// operation after calling the getPreorderInfo operation to get the NeedByDate
            /// value and other pre-order information about the shipment.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='needByDate'>
            /// Date that the shipment must arrive at the Amazon fulfillment center to
            /// avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD
            /// format. The response to the getPreorderInfo operation returns this value.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace the shipment is tied
            /// to.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfirmPreorderResponse> ConfirmPreorderAsync(this IFulfillmentInboundClient operations, string shipmentId, System.DateTime needByDate, string marketplaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConfirmPreorderWithHttpMessagesAsync(shipmentId, needByDate, marketplaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns labeling requirements and item preparation instructions to help
            /// prepare items for shipment to Amazon's fulfillment network.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipToCountryCode'>
            /// The country code of the country to which the items will be shipped. Note
            /// that labeling requirements and item preparation instructions can vary by
            /// country.
            /// </param>
            /// <param name='sellerSKUList'>
            /// A list of SellerSKU values. Used to identify items for which you want
            /// labeling requirements and item preparation instructions for shipment to
            /// Amazon's fulfillment network. The SellerSKU is qualified by the Seller ID,
            /// which is included with every call to the Seller Partner API.
            ///
            /// Note: Include seller SKUs that you have used to list items on Amazon's
            /// retail website. If you include a seller SKU that you have never used to
            /// list an item on Amazon's retail website, the seller SKU is returned in the
            /// InvalidSKUList property in the response.
            /// </param>
            /// <param name='aSINList'>
            /// A list of ASIN values. Used to identify items for which you want item
            /// preparation instructions to help with item sourcing decisions.
            ///
            /// Note: ASINs must be included in the product catalog for at least one of the
            /// marketplaces that the seller  participates in. Any ASIN that is not
            /// included in the product catalog for at least one of the marketplaces that
            /// the seller participates in is returned in the InvalidASINList property in
            /// the response. You can find out which marketplaces a seller participates in
            /// by calling the getMarketplaceParticipations operation in the Selling
            /// Partner API for Sellers.
            /// </param>
            public static GetPrepInstructionsResponse GetPrepInstructions(this IFulfillmentInboundClient operations, string shipToCountryCode, IList<string> sellerSKUList = default(IList<string>), IList<string> aSINList = default(IList<string>))
            {
                return operations.GetPrepInstructionsAsync(shipToCountryCode, sellerSKUList, aSINList).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns labeling requirements and item preparation instructions to help
            /// prepare items for shipment to Amazon's fulfillment network.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipToCountryCode'>
            /// The country code of the country to which the items will be shipped. Note
            /// that labeling requirements and item preparation instructions can vary by
            /// country.
            /// </param>
            /// <param name='sellerSKUList'>
            /// A list of SellerSKU values. Used to identify items for which you want
            /// labeling requirements and item preparation instructions for shipment to
            /// Amazon's fulfillment network. The SellerSKU is qualified by the Seller ID,
            /// which is included with every call to the Seller Partner API.
            ///
            /// Note: Include seller SKUs that you have used to list items on Amazon's
            /// retail website. If you include a seller SKU that you have never used to
            /// list an item on Amazon's retail website, the seller SKU is returned in the
            /// InvalidSKUList property in the response.
            /// </param>
            /// <param name='aSINList'>
            /// A list of ASIN values. Used to identify items for which you want item
            /// preparation instructions to help with item sourcing decisions.
            ///
            /// Note: ASINs must be included in the product catalog for at least one of the
            /// marketplaces that the seller  participates in. Any ASIN that is not
            /// included in the product catalog for at least one of the marketplaces that
            /// the seller participates in is returned in the InvalidASINList property in
            /// the response. You can find out which marketplaces a seller participates in
            /// by calling the getMarketplaceParticipations operation in the Selling
            /// Partner API for Sellers.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetPrepInstructionsResponse> GetPrepInstructionsAsync(this IFulfillmentInboundClient operations, string shipToCountryCode, IList<string> sellerSKUList = default(IList<string>), IList<string> aSINList = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPrepInstructionsWithHttpMessagesAsync(shipToCountryCode, sellerSKUList, aSINList, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns current transportation information about an inbound shipment.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            public static GetTransportDetailsResponse GetTransportDetails(this IFulfillmentInboundClient operations, string shipmentId)
            {
                return operations.GetTransportDetailsAsync(shipmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns current transportation information about an inbound shipment.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetTransportDetailsResponse> GetTransportDetailsAsync(this IFulfillmentInboundClient operations, string shipmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransportDetailsWithHttpMessagesAsync(shipmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends transportation information to Amazon about an inbound shipment.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static PutTransportDetailsResponse PutTransportDetails(this IFulfillmentInboundClient operations, string shipmentId, PutTransportDetailsRequest body)
            {
                return operations.PutTransportDetailsAsync(shipmentId, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends transportation information to Amazon about an inbound shipment.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PutTransportDetailsResponse> PutTransportDetailsAsync(this IFulfillmentInboundClient operations, string shipmentId, PutTransportDetailsRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutTransportDetailsWithHttpMessagesAsync(shipmentId, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a previously-confirmed request to ship an inbound shipment using an
            /// Amazon-partnered carrier.
            ///
            /// To be successful, you must call this operation before the VoidDeadline date
            /// that is returned by the getTransportDetails operation.
            ///
            /// Important: The VoidDeadline date is 24 hours after you confirm a Small
            /// Parcel shipment transportation request or one hour after you confirm a Less
            /// Than Truckload/Full Truckload (LTL/FTL) shipment transportation request.
            /// After the void deadline passes, your account will be charged for the
            /// shipping cost.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            public static VoidTransportResponse VoidTransport(this IFulfillmentInboundClient operations, string shipmentId)
            {
                return operations.VoidTransportAsync(shipmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a previously-confirmed request to ship an inbound shipment using an
            /// Amazon-partnered carrier.
            ///
            /// To be successful, you must call this operation before the VoidDeadline date
            /// that is returned by the getTransportDetails operation.
            ///
            /// Important: The VoidDeadline date is 24 hours after you confirm a Small
            /// Parcel shipment transportation request or one hour after you confirm a Less
            /// Than Truckload/Full Truckload (LTL/FTL) shipment transportation request.
            /// After the void deadline passes, your account will be charged for the
            /// shipping cost.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VoidTransportResponse> VoidTransportAsync(this IFulfillmentInboundClient operations, string shipmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VoidTransportWithHttpMessagesAsync(shipmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Initiates the process of estimating the shipping cost for an inbound
            /// shipment by an Amazon-partnered carrier.
            ///
            /// Prior to calling the estimateTransport operation, you must call the
            /// putTransportDetails operation to provide Amazon with the transportation
            /// information for the inbound shipment.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            public static EstimateTransportResponse EstimateTransport(this IFulfillmentInboundClient operations, string shipmentId)
            {
                return operations.EstimateTransportAsync(shipmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initiates the process of estimating the shipping cost for an inbound
            /// shipment by an Amazon-partnered carrier.
            ///
            /// Prior to calling the estimateTransport operation, you must call the
            /// putTransportDetails operation to provide Amazon with the transportation
            /// information for the inbound shipment.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<EstimateTransportResponse> EstimateTransportAsync(this IFulfillmentInboundClient operations, string shipmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EstimateTransportWithHttpMessagesAsync(shipmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Confirms that the seller accepts the Amazon-partnered shipping estimate,
            /// agrees to allow Amazon to charge their account for the shipping cost, and
            /// requests that the Amazon-partnered carrier ship the inbound shipment.
            ///
            /// Prior to calling the confirmTransport operation, you should call the
            /// getTransportDetails operation to get the Amazon-partnered shipping
            /// estimate.
            ///
            /// Important: After confirming the transportation request, if the seller
            /// decides that they do not want the Amazon-partnered carrier to ship the
            /// inbound shipment, you can call the voidTransport operation to cancel the
            /// transportation request. Note that for a Small Parcel shipment, the seller
            /// has 24 hours after confirming a transportation request to void the
            /// transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL)
            /// shipment, the seller has one hour after confirming a transportation request
            /// to void it. After the grace period has expired the seller's account will be
            /// charged for the shipping cost.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            public static ConfirmTransportResponse ConfirmTransport(this IFulfillmentInboundClient operations, string shipmentId)
            {
                return operations.ConfirmTransportAsync(shipmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Confirms that the seller accepts the Amazon-partnered shipping estimate,
            /// agrees to allow Amazon to charge their account for the shipping cost, and
            /// requests that the Amazon-partnered carrier ship the inbound shipment.
            ///
            /// Prior to calling the confirmTransport operation, you should call the
            /// getTransportDetails operation to get the Amazon-partnered shipping
            /// estimate.
            ///
            /// Important: After confirming the transportation request, if the seller
            /// decides that they do not want the Amazon-partnered carrier to ship the
            /// inbound shipment, you can call the voidTransport operation to cancel the
            /// transportation request. Note that for a Small Parcel shipment, the seller
            /// has 24 hours after confirming a transportation request to void the
            /// transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL)
            /// shipment, the seller has one hour after confirming a transportation request
            /// to void it. After the grace period has expired the seller's account will be
            /// charged for the shipping cost.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConfirmTransportResponse> ConfirmTransportAsync(this IFulfillmentInboundClient operations, string shipmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConfirmTransportWithHttpMessagesAsync(shipmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns package/pallet labels for faster and more accurate shipment
            /// processing at the Amazon fulfillment center.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='pageType'>
            /// The page type to use to print the labels. Submitting a PageType value that
            /// is not supported in your marketplace returns an error. Possible values
            /// include: 'PackageLabel_Letter_2', 'PackageLabel_Letter_4',
            /// 'PackageLabel_Letter_6', 'PackageLabel_Letter_6_CarrierLeft',
            /// 'PackageLabel_A4_2', 'PackageLabel_A4_4', 'PackageLabel_Plain_Paper',
            /// 'PackageLabel_Plain_Paper_CarrierBottom', 'PackageLabel_Thermal',
            /// 'PackageLabel_Thermal_Unified', 'PackageLabel_Thermal_NonPCP',
            /// 'PackageLabel_Thermal_No_Carrier_Rotation'
            /// </param>
            /// <param name='labelType'>
            /// The type of labels requested. Possible values include: 'BARCODE_2D',
            /// 'UNIQUE', 'PALLET'
            /// </param>
            /// <param name='numberOfPackages'>
            /// The number of packages in the shipment.
            /// </param>
            /// <param name='packageLabelsToPrint'>
            /// A list of identifiers that specify packages for which you want package
            /// labels printed.
            ///
            /// Must match CartonId values previously passed using the FBA Inbound Shipment
            /// Carton Information Feed. If not, the operation returns the
            /// IncorrectPackageIdentifier error code.
            /// </param>
            /// <param name='numberOfPallets'>
            /// The number of pallets in the shipment. This returns four identical labels
            /// for each pallet.
            /// </param>
            /// <param name='pageSize'>
            /// The page size for paginating through the total packages' labels. This is a
            /// required parameter for Non-Partnered LTL Shipments. Max value:1000.
            /// </param>
            /// <param name='pageStartIndex'>
            /// The page start index for paginating through the total packages' labels.
            /// This is a required parameter for Non-Partnered LTL Shipments.
            /// </param>
            public static GetLabelsResponse GetLabels(this IFulfillmentInboundClient operations, string shipmentId, string pageType, string labelType, int? numberOfPackages = default(int?), IList<string> packageLabelsToPrint = default(IList<string>), int? numberOfPallets = default(int?), int? pageSize = default(int?), int? pageStartIndex = default(int?))
            {
                return operations.GetLabelsAsync(shipmentId, pageType, labelType, numberOfPackages, packageLabelsToPrint, numberOfPallets, pageSize, pageStartIndex).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns package/pallet labels for faster and more accurate shipment
            /// processing at the Amazon fulfillment center.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='pageType'>
            /// The page type to use to print the labels. Submitting a PageType value that
            /// is not supported in your marketplace returns an error. Possible values
            /// include: 'PackageLabel_Letter_2', 'PackageLabel_Letter_4',
            /// 'PackageLabel_Letter_6', 'PackageLabel_Letter_6_CarrierLeft',
            /// 'PackageLabel_A4_2', 'PackageLabel_A4_4', 'PackageLabel_Plain_Paper',
            /// 'PackageLabel_Plain_Paper_CarrierBottom', 'PackageLabel_Thermal',
            /// 'PackageLabel_Thermal_Unified', 'PackageLabel_Thermal_NonPCP',
            /// 'PackageLabel_Thermal_No_Carrier_Rotation'
            /// </param>
            /// <param name='labelType'>
            /// The type of labels requested. Possible values include: 'BARCODE_2D',
            /// 'UNIQUE', 'PALLET'
            /// </param>
            /// <param name='numberOfPackages'>
            /// The number of packages in the shipment.
            /// </param>
            /// <param name='packageLabelsToPrint'>
            /// A list of identifiers that specify packages for which you want package
            /// labels printed.
            ///
            /// Must match CartonId values previously passed using the FBA Inbound Shipment
            /// Carton Information Feed. If not, the operation returns the
            /// IncorrectPackageIdentifier error code.
            /// </param>
            /// <param name='numberOfPallets'>
            /// The number of pallets in the shipment. This returns four identical labels
            /// for each pallet.
            /// </param>
            /// <param name='pageSize'>
            /// The page size for paginating through the total packages' labels. This is a
            /// required parameter for Non-Partnered LTL Shipments. Max value:1000.
            /// </param>
            /// <param name='pageStartIndex'>
            /// The page start index for paginating through the total packages' labels.
            /// This is a required parameter for Non-Partnered LTL Shipments.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetLabelsResponse> GetLabelsAsync(this IFulfillmentInboundClient operations, string shipmentId, string pageType, string labelType, int? numberOfPackages = default(int?), IList<string> packageLabelsToPrint = default(IList<string>), int? numberOfPallets = default(int?), int? pageSize = default(int?), int? pageStartIndex = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLabelsWithHttpMessagesAsync(shipmentId, pageType, labelType, numberOfPackages, packageLabelsToPrint, numberOfPallets, pageSize, pageStartIndex, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL)
            /// shipment. The getBillOfLading operation returns PDF document data for
            /// printing a bill of lading for an Amazon-partnered Less Than Truckload/Full
            /// Truckload (LTL/FTL) inbound shipment.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            public static GetBillOfLadingResponse GetBillOfLading(this IFulfillmentInboundClient operations, string shipmentId)
            {
                return operations.GetBillOfLadingAsync(shipmentId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL)
            /// shipment. The getBillOfLading operation returns PDF document data for
            /// printing a bill of lading for an Amazon-partnered Less Than Truckload/Full
            /// Truckload (LTL/FTL) inbound shipment.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier originally returned by the createInboundShipmentPlan
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetBillOfLadingResponse> GetBillOfLadingAsync(this IFulfillmentInboundClient operations, string shipmentId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBillOfLadingWithHttpMessagesAsync(shipmentId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of inbound shipments based on criteria that you specify.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryType'>
            /// Indicates whether shipments are returned using shipment information (by
            /// providing the ShipmentStatusList or ShipmentIdList parameters), using a
            /// date range (by providing the LastUpdatedAfter and LastUpdatedBefore
            /// parameters), or by using NextToken to continue returning items specified in
            /// a previous request. Possible values include: 'SHIPMENT', 'DATE_RANGE',
            /// 'NEXT_TOKEN'
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace where the product would
            /// be stored.
            /// </param>
            /// <param name='shipmentStatusList'>
            /// A list of ShipmentStatus values. Used to select shipments with a current
            /// status that matches the status values that you specify.
            /// </param>
            /// <param name='shipmentIdList'>
            /// A list of shipment IDs used to select the shipments that you want. If both
            /// ShipmentStatusList and ShipmentIdList are specified, only shipments that
            /// match both parameters are returned.
            /// </param>
            /// <param name='lastUpdatedAfter'>
            /// A date used for selecting inbound shipments that were last updated after
            /// (or at) a specified time. The selection includes updates made by Amazon and
            /// by the seller.
            /// </param>
            /// <param name='lastUpdatedBefore'>
            /// A date used for selecting inbound shipments that were last updated before
            /// (or at) a specified time. The selection includes updates made by Amazon and
            /// by the seller.
            /// </param>
            /// <param name='nextToken'>
            /// A string token returned in the response to your previous request.
            /// </param>
            public static GetShipmentsResponse GetShipments(this IFulfillmentInboundClient operations, string queryType, string marketplaceId, IList<string> shipmentStatusList = default(IList<string>), IList<string> shipmentIdList = default(IList<string>), System.DateTime? lastUpdatedAfter = default(System.DateTime?), System.DateTime? lastUpdatedBefore = default(System.DateTime?), string nextToken = default(string))
            {
                return operations.GetShipmentsAsync(queryType, marketplaceId, shipmentStatusList, shipmentIdList, lastUpdatedAfter, lastUpdatedBefore, nextToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of inbound shipments based on criteria that you specify.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryType'>
            /// Indicates whether shipments are returned using shipment information (by
            /// providing the ShipmentStatusList or ShipmentIdList parameters), using a
            /// date range (by providing the LastUpdatedAfter and LastUpdatedBefore
            /// parameters), or by using NextToken to continue returning items specified in
            /// a previous request. Possible values include: 'SHIPMENT', 'DATE_RANGE',
            /// 'NEXT_TOKEN'
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace where the product would
            /// be stored.
            /// </param>
            /// <param name='shipmentStatusList'>
            /// A list of ShipmentStatus values. Used to select shipments with a current
            /// status that matches the status values that you specify.
            /// </param>
            /// <param name='shipmentIdList'>
            /// A list of shipment IDs used to select the shipments that you want. If both
            /// ShipmentStatusList and ShipmentIdList are specified, only shipments that
            /// match both parameters are returned.
            /// </param>
            /// <param name='lastUpdatedAfter'>
            /// A date used for selecting inbound shipments that were last updated after
            /// (or at) a specified time. The selection includes updates made by Amazon and
            /// by the seller.
            /// </param>
            /// <param name='lastUpdatedBefore'>
            /// A date used for selecting inbound shipments that were last updated before
            /// (or at) a specified time. The selection includes updates made by Amazon and
            /// by the seller.
            /// </param>
            /// <param name='nextToken'>
            /// A string token returned in the response to your previous request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetShipmentsResponse> GetShipmentsAsync(this IFulfillmentInboundClient operations, string queryType, string marketplaceId, IList<string> shipmentStatusList = default(IList<string>), IList<string> shipmentIdList = default(IList<string>), System.DateTime? lastUpdatedAfter = default(System.DateTime?), System.DateTime? lastUpdatedBefore = default(System.DateTime?), string nextToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShipmentsWithHttpMessagesAsync(queryType, marketplaceId, shipmentStatusList, shipmentIdList, lastUpdatedAfter, lastUpdatedBefore, nextToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of items in a specified inbound shipment.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier used for selecting items in a specific inbound
            /// shipment.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace where the product would
            /// be stored.
            /// </param>
            public static GetShipmentItemsResponse GetShipmentItemsByShipmentId(this IFulfillmentInboundClient operations, string shipmentId, string marketplaceId)
            {
                return operations.GetShipmentItemsByShipmentIdAsync(shipmentId, marketplaceId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of items in a specified inbound shipment.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='shipmentId'>
            /// A shipment identifier used for selecting items in a specific inbound
            /// shipment.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace where the product would
            /// be stored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetShipmentItemsResponse> GetShipmentItemsByShipmentIdAsync(this IFulfillmentInboundClient operations, string shipmentId, string marketplaceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShipmentItemsByShipmentIdWithHttpMessagesAsync(shipmentId, marketplaceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a list of items in a specified inbound shipment, or a list of items
            /// that were updated within a specified time frame.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryType'>
            /// Indicates whether items are returned using a date range (by providing the
            /// LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken,
            /// which continues returning items specified in a previous request. Possible
            /// values include: 'DATE_RANGE', 'NEXT_TOKEN'
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace where the product would
            /// be stored.
            /// </param>
            /// <param name='lastUpdatedAfter'>
            /// A date used for selecting inbound shipment items that were last updated
            /// after (or at) a specified time. The selection includes updates made by
            /// Amazon and by the seller.
            /// </param>
            /// <param name='lastUpdatedBefore'>
            /// A date used for selecting inbound shipment items that were last updated
            /// before (or at) a specified time. The selection includes updates made by
            /// Amazon and by the seller.
            /// </param>
            /// <param name='nextToken'>
            /// A string token returned in the response to your previous request.
            /// </param>
            public static GetShipmentItemsResponse GetShipmentItems(this IFulfillmentInboundClient operations, string queryType, string marketplaceId, System.DateTime? lastUpdatedAfter = default(System.DateTime?), System.DateTime? lastUpdatedBefore = default(System.DateTime?), string nextToken = default(string))
            {
                return operations.GetShipmentItemsAsync(queryType, marketplaceId, lastUpdatedAfter, lastUpdatedBefore, nextToken).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a list of items in a specified inbound shipment, or a list of items
            /// that were updated within a specified time frame.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 2 | 30 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queryType'>
            /// Indicates whether items are returned using a date range (by providing the
            /// LastUpdatedAfter and LastUpdatedBefore parameters), or using NextToken,
            /// which continues returning items specified in a previous request. Possible
            /// values include: 'DATE_RANGE', 'NEXT_TOKEN'
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace where the product would
            /// be stored.
            /// </param>
            /// <param name='lastUpdatedAfter'>
            /// A date used for selecting inbound shipment items that were last updated
            /// after (or at) a specified time. The selection includes updates made by
            /// Amazon and by the seller.
            /// </param>
            /// <param name='lastUpdatedBefore'>
            /// A date used for selecting inbound shipment items that were last updated
            /// before (or at) a specified time. The selection includes updates made by
            /// Amazon and by the seller.
            /// </param>
            /// <param name='nextToken'>
            /// A string token returned in the response to your previous request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetShipmentItemsResponse> GetShipmentItemsAsync(this IFulfillmentInboundClient operations, string queryType, string marketplaceId, System.DateTime? lastUpdatedAfter = default(System.DateTime?), System.DateTime? lastUpdatedBefore = default(System.DateTime?), string nextToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetShipmentItemsWithHttpMessagesAsync(queryType, marketplaceId, lastUpdatedAfter, lastUpdatedBefore, nextToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
