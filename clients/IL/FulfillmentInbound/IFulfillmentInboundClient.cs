// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FulfillmentInbound
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// The Selling Partner API for Fulfillment Inbound lets you create
    /// applications that create and update inbound shipments of inventory to
    /// Amazon's fulfillment network.
    /// </summary>
    public partial interface IFulfillmentInboundClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Returns information that lets a seller know if Amazon recommends
        /// sending an item to a given marketplace. In some cases, Amazon
        /// provides guidance for why a given SellerSKU or ASIN is not
        /// recommended for shipment to Amazon's fulfillment network. Sellers
        /// may still ship items that are not recommended, at their discretion.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='marketplaceId'>
        /// A marketplace identifier. Specifies the marketplace where the
        /// product would be stored.
        /// </param>
        /// <param name='sellerSKUList'>
        /// A list of SellerSKU values. Used to identify items for which you
        /// want inbound guidance for shipment to Amazon's fulfillment network.
        /// Note: SellerSKU is qualified by the SellerId, which is included
        /// with every Selling Partner API operation that you submit. If you
        /// specify a SellerSKU that identifies a variation parent ASIN, this
        /// operation returns an error. A variation parent ASIN represents a
        /// generic product that cannot be sold. Variation child ASINs
        /// represent products that have specific characteristics (such as size
        /// and color) and can be sold.
        /// </param>
        /// <param name='aSINList'>
        /// A list of ASIN values. Used to identify items for which you want
        /// inbound guidance for shipment to Amazon's fulfillment network.
        /// Note: If you specify a ASIN that identifies a variation parent
        /// ASIN, this operation returns an error. A variation parent ASIN
        /// represents a generic product that cannot be sold. Variation child
        /// ASINs represent products that have specific characteristics (such
        /// as size and color) and can be sold.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetInboundGuidanceResponse,GetInboundGuidanceHeaders>> GetInboundGuidanceWithHttpMessagesAsync(string marketplaceId, IList<string> sellerSKUList = default(IList<string>), IList<string> aSINList = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns one or more inbound shipment plans, which provide the
        /// information you need to create one or more inbound shipments for a
        /// set of items that you specify. Multiple inbound shipment plans
        /// might be required so that items can be optimally placed in Amazon's
        /// fulfillment network—for example, positioning inventory closer to
        /// the customer. Alternatively, two inbound shipment plans might be
        /// created with the same Amazon fulfillment center destination if the
        /// two shipment plans require different processing—for example, items
        /// that require labels must be shipped separately from stickerless,
        /// commingled inventory.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CreateInboundShipmentPlanResponse,CreateInboundShipmentPlanHeaders>> CreateInboundShipmentPlanWithHttpMessagesAsync(CreateInboundShipmentPlanRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a new inbound shipment based on the specified shipmentId
        /// that was returned by the createInboundShipmentPlan operation.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='shipmentId'>
        /// A shipment identifier originally returned by the
        /// createInboundShipmentPlan operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<InboundShipmentResponse,CreateInboundShipmentHeaders>> CreateInboundShipmentWithHttpMessagesAsync(InboundShipmentRequest body, string shipmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds, updates, or removes items from the inbound shipment
        /// identified by the specified shipment identifier.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='body'>
        /// </param>
        /// <param name='shipmentId'>
        /// A shipment identifier originally returned by the
        /// createInboundShipmentPlan operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<InboundShipmentResponse,UpdateInboundShipmentHeaders>> UpdateInboundShipmentWithHttpMessagesAsync(InboundShipmentRequest body, string shipmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns pre-order information, including dates, that a seller needs
        /// before confirming a shipment for pre-order.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='shipmentId'>
        /// A shipment identifier originally returned by the
        /// createInboundShipmentPlan operation.
        /// </param>
        /// <param name='marketplaceId'>
        /// A marketplace identifier. Specifies the marketplace the shipment is
        /// tied to.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetPreorderInfoResponse,GetPreorderInfoHeaders>> GetPreorderInfoWithHttpMessagesAsync(string shipmentId, string marketplaceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns information needed to confirm a shipment for pre-order.
        /// Call this operation after calling the getPreorderInfo operation to
        /// get the NeedByDate value and other pre-order information about the
        /// shipment.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='shipmentId'>
        /// A shipment identifier originally returned by the
        /// createInboundShipmentPlan operation.
        /// </param>
        /// <param name='needByDate'>
        /// Date that the shipment must arrive at the Amazon fulfillment center
        /// to avoid delivery promise breaks for pre-ordered items. Must be in
        /// YYYY-MM-DD format. The response to the getPreorderInfo operation
        /// returns this value.
        /// </param>
        /// <param name='marketplaceId'>
        /// A marketplace identifier. Specifies the marketplace the shipment is
        /// tied to.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ConfirmPreorderResponse,ConfirmPreorderHeaders>> ConfirmPreorderWithHttpMessagesAsync(string shipmentId, System.DateTime needByDate, string marketplaceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns labeling requirements and item preparation instructions to
        /// help prepare items for shipment to Amazon's fulfillment network.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='shipToCountryCode'>
        /// The country code of the country to which the items will be shipped.
        /// Note that labeling requirements and item preparation instructions
        /// can vary by country.
        /// </param>
        /// <param name='sellerSKUList'>
        /// A list of SellerSKU values. Used to identify items for which you
        /// want labeling requirements and item preparation instructions for
        /// shipment to Amazon's fulfillment network. The SellerSKU is
        /// qualified by the Seller ID, which is included with every call to
        /// the Seller Partner API.
        ///
        /// Note: Include seller SKUs that you have used to list items on
        /// Amazon's retail website. If you include a seller SKU that you have
        /// never used to list an item on Amazon's retail website, the seller
        /// SKU is returned in the InvalidSKUList property in the response.
        /// </param>
        /// <param name='aSINList'>
        /// A list of ASIN values. Used to identify items for which you want
        /// item preparation instructions to help with item sourcing decisions.
        ///
        /// Note: ASINs must be included in the product catalog for at least
        /// one of the marketplaces that the seller  participates in. Any ASIN
        /// that is not included in the product catalog for at least one of the
        /// marketplaces that the seller participates in is returned in the
        /// InvalidASINList property in the response. You can find out which
        /// marketplaces a seller participates in by calling the
        /// getMarketplaceParticipations operation in the Selling Partner API
        /// for Sellers.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetPrepInstructionsResponse,GetPrepInstructionsHeaders>> GetPrepInstructionsWithHttpMessagesAsync(string shipToCountryCode, IList<string> sellerSKUList = default(IList<string>), IList<string> aSINList = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns current transportation information about an inbound
        /// shipment.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='shipmentId'>
        /// A shipment identifier originally returned by the
        /// createInboundShipmentPlan operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetTransportDetailsResponse,GetTransportDetailsHeaders>> GetTransportDetailsWithHttpMessagesAsync(string shipmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Sends transportation information to Amazon about an inbound
        /// shipment.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='shipmentId'>
        /// A shipment identifier originally returned by the
        /// createInboundShipmentPlan operation.
        /// </param>
        /// <param name='body'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PutTransportDetailsResponse,PutTransportDetailsHeaders>> PutTransportDetailsWithHttpMessagesAsync(string shipmentId, PutTransportDetailsRequest body, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancels a previously-confirmed request to ship an inbound shipment
        /// using an Amazon-partnered carrier.
        ///
        /// To be successful, you must call this operation before the
        /// VoidDeadline date that is returned by the getTransportDetails
        /// operation.
        ///
        /// Important: The VoidDeadline date is 24 hours after you confirm a
        /// Small Parcel shipment transportation request or one hour after you
        /// confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment
        /// transportation request. After the void deadline passes, your
        /// account will be charged for the shipping cost.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='shipmentId'>
        /// A shipment identifier originally returned by the
        /// createInboundShipmentPlan operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<VoidTransportResponse,VoidTransportHeaders>> VoidTransportWithHttpMessagesAsync(string shipmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Initiates the process of estimating the shipping cost for an
        /// inbound shipment by an Amazon-partnered carrier.
        ///
        /// Prior to calling the estimateTransport operation, you must call the
        /// putTransportDetails operation to provide Amazon with the
        /// transportation information for the inbound shipment.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='shipmentId'>
        /// A shipment identifier originally returned by the
        /// createInboundShipmentPlan operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<EstimateTransportResponse,EstimateTransportHeaders>> EstimateTransportWithHttpMessagesAsync(string shipmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Confirms that the seller accepts the Amazon-partnered shipping
        /// estimate, agrees to allow Amazon to charge their account for the
        /// shipping cost, and requests that the Amazon-partnered carrier ship
        /// the inbound shipment.
        ///
        /// Prior to calling the confirmTransport operation, you should call
        /// the getTransportDetails operation to get the Amazon-partnered
        /// shipping estimate.
        ///
        /// Important: After confirming the transportation request, if the
        /// seller decides that they do not want the Amazon-partnered carrier
        /// to ship the inbound shipment, you can call the voidTransport
        /// operation to cancel the transportation request. Note that for a
        /// Small Parcel shipment, the seller has 24 hours after confirming a
        /// transportation request to void the transportation request. For a
        /// Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller
        /// has one hour after confirming a transportation request to void it.
        /// After the grace period has expired the seller's account will be
        /// charged for the shipping cost.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='shipmentId'>
        /// A shipment identifier originally returned by the
        /// createInboundShipmentPlan operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ConfirmTransportResponse,ConfirmTransportHeaders>> ConfirmTransportWithHttpMessagesAsync(string shipmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns package/pallet labels for faster and more accurate shipment
        /// processing at the Amazon fulfillment center.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='shipmentId'>
        /// A shipment identifier originally returned by the
        /// createInboundShipmentPlan operation.
        /// </param>
        /// <param name='pageType'>
        /// The page type to use to print the labels. Submitting a PageType
        /// value that is not supported in your marketplace returns an error.
        /// Possible values include: 'PackageLabel_Letter_2',
        /// 'PackageLabel_Letter_4', 'PackageLabel_Letter_6',
        /// 'PackageLabel_Letter_6_CarrierLeft', 'PackageLabel_A4_2',
        /// 'PackageLabel_A4_4', 'PackageLabel_Plain_Paper',
        /// 'PackageLabel_Plain_Paper_CarrierBottom', 'PackageLabel_Thermal',
        /// 'PackageLabel_Thermal_Unified', 'PackageLabel_Thermal_NonPCP',
        /// 'PackageLabel_Thermal_No_Carrier_Rotation'
        /// </param>
        /// <param name='labelType'>
        /// The type of labels requested. Possible values include:
        /// 'BARCODE_2D', 'UNIQUE', 'PALLET'
        /// </param>
        /// <param name='numberOfPackages'>
        /// The number of packages in the shipment.
        /// </param>
        /// <param name='packageLabelsToPrint'>
        /// A list of identifiers that specify packages for which you want
        /// package labels printed.
        ///
        /// Must match CartonId values previously passed using the FBA Inbound
        /// Shipment Carton Information Feed. If not, the operation returns the
        /// IncorrectPackageIdentifier error code.
        /// </param>
        /// <param name='numberOfPallets'>
        /// The number of pallets in the shipment. This returns four identical
        /// labels for each pallet.
        /// </param>
        /// <param name='pageSize'>
        /// The page size for paginating through the total packages' labels.
        /// This is a required parameter for Non-Partnered LTL Shipments. Max
        /// value:1000.
        /// </param>
        /// <param name='pageStartIndex'>
        /// The page start index for paginating through the total packages'
        /// labels. This is a required parameter for Non-Partnered LTL
        /// Shipments.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetLabelsResponse,GetLabelsHeaders>> GetLabelsWithHttpMessagesAsync(string shipmentId, string pageType, string labelType, int? numberOfPackages = default(int?), IList<string> packageLabelsToPrint = default(IList<string>), int? numberOfPallets = default(int?), int? pageSize = default(int?), int? pageStartIndex = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a bill of lading for a Less Than Truckload/Full Truckload
        /// (LTL/FTL) shipment. The getBillOfLading operation returns PDF
        /// document data for printing a bill of lading for an Amazon-partnered
        /// Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='shipmentId'>
        /// A shipment identifier originally returned by the
        /// createInboundShipmentPlan operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetBillOfLadingResponse,GetBillOfLadingHeaders>> GetBillOfLadingWithHttpMessagesAsync(string shipmentId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of inbound shipments based on criteria that you
        /// specify.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='queryType'>
        /// Indicates whether shipments are returned using shipment information
        /// (by providing the ShipmentStatusList or ShipmentIdList parameters),
        /// using a date range (by providing the LastUpdatedAfter and
        /// LastUpdatedBefore parameters), or by using NextToken to continue
        /// returning items specified in a previous request. Possible values
        /// include: 'SHIPMENT', 'DATE_RANGE', 'NEXT_TOKEN'
        /// </param>
        /// <param name='marketplaceId'>
        /// A marketplace identifier. Specifies the marketplace where the
        /// product would be stored.
        /// </param>
        /// <param name='shipmentStatusList'>
        /// A list of ShipmentStatus values. Used to select shipments with a
        /// current status that matches the status values that you specify.
        /// </param>
        /// <param name='shipmentIdList'>
        /// A list of shipment IDs used to select the shipments that you want.
        /// If both ShipmentStatusList and ShipmentIdList are specified, only
        /// shipments that match both parameters are returned.
        /// </param>
        /// <param name='lastUpdatedAfter'>
        /// A date used for selecting inbound shipments that were last updated
        /// after (or at) a specified time. The selection includes updates made
        /// by Amazon and by the seller.
        /// </param>
        /// <param name='lastUpdatedBefore'>
        /// A date used for selecting inbound shipments that were last updated
        /// before (or at) a specified time. The selection includes updates
        /// made by Amazon and by the seller.
        /// </param>
        /// <param name='nextToken'>
        /// A string token returned in the response to your previous request.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetShipmentsResponse,GetShipmentsHeaders>> GetShipmentsWithHttpMessagesAsync(string queryType, string marketplaceId, IList<string> shipmentStatusList = default(IList<string>), IList<string> shipmentIdList = default(IList<string>), System.DateTime? lastUpdatedAfter = default(System.DateTime?), System.DateTime? lastUpdatedBefore = default(System.DateTime?), string nextToken = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of items in a specified inbound shipment.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='shipmentId'>
        /// A shipment identifier used for selecting items in a specific
        /// inbound shipment.
        /// </param>
        /// <param name='marketplaceId'>
        /// A marketplace identifier. Specifies the marketplace where the
        /// product would be stored.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetShipmentItemsResponse,GetShipmentItemsByShipmentIdHeaders>> GetShipmentItemsByShipmentIdWithHttpMessagesAsync(string shipmentId, string marketplaceId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a list of items in a specified inbound shipment, or a list
        /// of items that were updated within a specified time frame.
        ///
        /// **Usage Plan:**
        ///
        /// | Rate (requests per second) | Burst |
        /// | ---- | ---- |
        /// | 2 | 30 |
        ///
        /// For more information, see "Usage Plans and Rate Limits" in the
        /// Selling Partner API documentation.
        /// </summary>
        /// <param name='queryType'>
        /// Indicates whether items are returned using a date range (by
        /// providing the LastUpdatedAfter and LastUpdatedBefore parameters),
        /// or using NextToken, which continues returning items specified in a
        /// previous request. Possible values include: 'DATE_RANGE',
        /// 'NEXT_TOKEN'
        /// </param>
        /// <param name='marketplaceId'>
        /// A marketplace identifier. Specifies the marketplace where the
        /// product would be stored.
        /// </param>
        /// <param name='lastUpdatedAfter'>
        /// A date used for selecting inbound shipment items that were last
        /// updated after (or at) a specified time. The selection includes
        /// updates made by Amazon and by the seller.
        /// </param>
        /// <param name='lastUpdatedBefore'>
        /// A date used for selecting inbound shipment items that were last
        /// updated before (or at) a specified time. The selection includes
        /// updates made by Amazon and by the seller.
        /// </param>
        /// <param name='nextToken'>
        /// A string token returned in the response to your previous request.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetShipmentItemsResponse,GetShipmentItemsHeaders>> GetShipmentItemsWithHttpMessagesAsync(string queryType, string marketplaceId, System.DateTime? lastUpdatedAfter = default(System.DateTime?), System.DateTime? lastUpdatedBefore = default(System.DateTime?), string nextToken = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
