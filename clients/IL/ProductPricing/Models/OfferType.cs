// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.ProductPricing.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class OfferType
    {
        /// <summary>
        /// Initializes a new instance of the OfferType class.
        /// </summary>
        public OfferType()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OfferType class.
        /// </summary>
        /// <param name="buyingPrice">Contains pricing information that
        /// includes promotions and contains the shipping cost.</param>
        /// <param name="regularPrice">The current price excluding any
        /// promotions that apply to the product. Excludes the shipping
        /// cost.</param>
        /// <param name="fulfillmentChannel">The fulfillment channel for the
        /// offer listing. Possible values:
        ///
        /// * Amazon - Fulfilled by Amazon.
        /// * Merchant - Fulfilled by the seller.</param>
        /// <param name="itemCondition">The item condition for the offer
        /// listing. Possible values: New, Used, Collectible, Refurbished, or
        /// Club.</param>
        /// <param name="itemSubCondition">The item subcondition for the offer
        /// listing. Possible values: New, Mint, Very Good, Good, Acceptable,
        /// Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open
        /// Box, or Other.</param>
        /// <param name="sellerSKU">The seller stock keeping unit (SKU) of the
        /// item.</param>
        public OfferType(PriceType buyingPrice, MoneyType regularPrice, string fulfillmentChannel, string itemCondition, string itemSubCondition, string sellerSKU)
        {
            BuyingPrice = buyingPrice;
            RegularPrice = regularPrice;
            FulfillmentChannel = fulfillmentChannel;
            ItemCondition = itemCondition;
            ItemSubCondition = itemSubCondition;
            SellerSKU = sellerSKU;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets contains pricing information that includes promotions
        /// and contains the shipping cost.
        /// </summary>
        [JsonProperty(PropertyName = "BuyingPrice")]
        public PriceType BuyingPrice { get; set; }

        /// <summary>
        /// Gets or sets the current price excluding any promotions that apply
        /// to the product. Excludes the shipping cost.
        /// </summary>
        [JsonProperty(PropertyName = "RegularPrice")]
        public MoneyType RegularPrice { get; set; }

        /// <summary>
        /// Gets or sets the fulfillment channel for the offer listing.
        /// Possible values:
        ///
        /// * Amazon - Fulfilled by Amazon.
        /// * Merchant - Fulfilled by the seller.
        /// </summary>
        [JsonProperty(PropertyName = "FulfillmentChannel")]
        public string FulfillmentChannel { get; set; }

        /// <summary>
        /// Gets or sets the item condition for the offer listing. Possible
        /// values: New, Used, Collectible, Refurbished, or Club.
        /// </summary>
        [JsonProperty(PropertyName = "ItemCondition")]
        public string ItemCondition { get; set; }

        /// <summary>
        /// Gets or sets the item subcondition for the offer listing. Possible
        /// values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM,
        /// Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
        /// </summary>
        [JsonProperty(PropertyName = "ItemSubCondition")]
        public string ItemSubCondition { get; set; }

        /// <summary>
        /// Gets or sets the seller stock keeping unit (SKU) of the item.
        /// </summary>
        [JsonProperty(PropertyName = "SellerSKU")]
        public string SellerSKU { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BuyingPrice == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BuyingPrice");
            }
            if (RegularPrice == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RegularPrice");
            }
            if (FulfillmentChannel == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FulfillmentChannel");
            }
            if (ItemCondition == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ItemCondition");
            }
            if (ItemSubCondition == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ItemSubCondition");
            }
            if (SellerSKU == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SellerSKU");
            }
            if (BuyingPrice != null)
            {
                BuyingPrice.Validate();
            }
        }
    }
}
