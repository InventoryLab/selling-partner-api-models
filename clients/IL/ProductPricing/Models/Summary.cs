// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.ProductPricing.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Contains price information about the product, including the
    /// LowestPrices and BuyBoxPrices, the ListPrice, the
    /// SuggestedLowerPricePlusShipping, and NumberOfOffers and
    /// NumberOfBuyBoxEligibleOffers.
    /// </summary>
    public partial class Summary
    {
        /// <summary>
        /// Initializes a new instance of the Summary class.
        /// </summary>
        public Summary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Summary class.
        /// </summary>
        /// <param name="totalOfferCount">The number of unique offers contained
        /// in NumberOfOffers.</param>
        /// <param name="numberOfOffers">A list that contains the total number
        /// of offers for the item for the given conditions and fulfillment
        /// channels.</param>
        /// <param name="lowestPrices">A list of the lowest prices for the
        /// item.</param>
        /// <param name="buyBoxPrices">A list of item prices.</param>
        /// <param name="listPrice">The list price of the item as suggested by
        /// the manufacturer.</param>
        /// <param name="suggestedLowerPricePlusShipping">The suggested lower
        /// price of the item, including shipping and Amazon Points. The
        /// suggested lower price is based on a range of factors, including
        /// historical selling prices, recent Buy Box-eligible prices, and
        /// input from customers for your products.</param>
        /// <param name="buyBoxEligibleOffers">A list that contains the total
        /// number of offers that are eligible for the Buy Box for the given
        /// conditions and fulfillment channels.</param>
        /// <param name="offersAvailableTime">When the status is
        /// ActiveButTooSoonForProcessing, this is the time when the offers
        /// will be available for processing.</param>
        public Summary(int totalOfferCount, IList<OfferCountType> numberOfOffers = default(IList<OfferCountType>), IList<LowestPriceType> lowestPrices = default(IList<LowestPriceType>), IList<BuyBoxPriceType> buyBoxPrices = default(IList<BuyBoxPriceType>), MoneyType listPrice = default(MoneyType), MoneyType suggestedLowerPricePlusShipping = default(MoneyType), IList<OfferCountType> buyBoxEligibleOffers = default(IList<OfferCountType>), System.DateTime? offersAvailableTime = default(System.DateTime?))
        {
            TotalOfferCount = totalOfferCount;
            NumberOfOffers = numberOfOffers;
            LowestPrices = lowestPrices;
            BuyBoxPrices = buyBoxPrices;
            ListPrice = listPrice;
            SuggestedLowerPricePlusShipping = suggestedLowerPricePlusShipping;
            BuyBoxEligibleOffers = buyBoxEligibleOffers;
            OffersAvailableTime = offersAvailableTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the number of unique offers contained in
        /// NumberOfOffers.
        /// </summary>
        [JsonProperty(PropertyName = "TotalOfferCount")]
        public int TotalOfferCount { get; set; }

        /// <summary>
        /// Gets or sets a list that contains the total number of offers for
        /// the item for the given conditions and fulfillment channels.
        /// </summary>
        [JsonProperty(PropertyName = "NumberOfOffers")]
        public IList<OfferCountType> NumberOfOffers { get; set; }

        /// <summary>
        /// Gets or sets a list of the lowest prices for the item.
        /// </summary>
        [JsonProperty(PropertyName = "LowestPrices")]
        public IList<LowestPriceType> LowestPrices { get; set; }

        /// <summary>
        /// Gets or sets a list of item prices.
        /// </summary>
        [JsonProperty(PropertyName = "BuyBoxPrices")]
        public IList<BuyBoxPriceType> BuyBoxPrices { get; set; }

        /// <summary>
        /// Gets or sets the list price of the item as suggested by the
        /// manufacturer.
        /// </summary>
        [JsonProperty(PropertyName = "ListPrice")]
        public MoneyType ListPrice { get; set; }

        /// <summary>
        /// Gets or sets the suggested lower price of the item, including
        /// shipping and Amazon Points. The suggested lower price is based on a
        /// range of factors, including historical selling prices, recent Buy
        /// Box-eligible prices, and input from customers for your products.
        /// </summary>
        [JsonProperty(PropertyName = "SuggestedLowerPricePlusShipping")]
        public MoneyType SuggestedLowerPricePlusShipping { get; set; }

        /// <summary>
        /// Gets or sets a list that contains the total number of offers that
        /// are eligible for the Buy Box for the given conditions and
        /// fulfillment channels.
        /// </summary>
        [JsonProperty(PropertyName = "BuyBoxEligibleOffers")]
        public IList<OfferCountType> BuyBoxEligibleOffers { get; set; }

        /// <summary>
        /// Gets or sets when the status is ActiveButTooSoonForProcessing, this
        /// is the time when the offers will be available for processing.
        /// </summary>
        [JsonProperty(PropertyName = "OffersAvailableTime")]
        public System.DateTime? OffersAvailableTime { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (LowestPrices != null)
            {
                foreach (var element in LowestPrices)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (BuyBoxPrices != null)
            {
                foreach (var element1 in BuyBoxPrices)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
