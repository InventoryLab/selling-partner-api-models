// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.ProductPricing
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ProductPricingClient.
    /// </summary>
    public static partial class ProductPricingClientExtensions
    {
            /// <summary>
            /// Returns pricing information for a seller's offer listings based on seller
            /// SKU or ASIN.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 1 | 1 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace for which prices are
            /// returned.
            /// </param>
            /// <param name='itemType'>
            /// Indicates whether ASIN values or seller SKU values are used to identify
            /// items. If you specify Asin, the information in the response will be
            /// dependent on the list of Asins you provide in the Asins parameter. If you
            /// specify Sku, the information in the response will be dependent on the list
            /// of Skus you provide in the Skus parameter. Possible values include: 'Asin',
            /// 'Sku'
            /// </param>
            /// <param name='asins'>
            /// A list of up to twenty Amazon Standard Identification Number (ASIN) values
            /// used to identify items in the given marketplace.
            /// </param>
            /// <param name='skus'>
            /// A list of up to twenty seller SKU values used to identify items in the
            /// given marketplace.
            /// </param>
            /// <param name='itemCondition'>
            /// Filters the offer listings based on item condition. Possible values: New,
            /// Used, Collectible, Refurbished, Club. Possible values include: 'New',
            /// 'Used', 'Collectible', 'Refurbished', 'Club'
            /// </param>
            public static GetPricingResponse GetPricing(this IProductPricingClient operations, string marketplaceId, string itemType, IList<string> asins = default(IList<string>), IList<string> skus = default(IList<string>), string itemCondition = default(string))
            {
                return operations.GetPricingAsync(marketplaceId, itemType, asins, skus, itemCondition).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns pricing information for a seller's offer listings based on seller
            /// SKU or ASIN.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 1 | 1 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace for which prices are
            /// returned.
            /// </param>
            /// <param name='itemType'>
            /// Indicates whether ASIN values or seller SKU values are used to identify
            /// items. If you specify Asin, the information in the response will be
            /// dependent on the list of Asins you provide in the Asins parameter. If you
            /// specify Sku, the information in the response will be dependent on the list
            /// of Skus you provide in the Skus parameter. Possible values include: 'Asin',
            /// 'Sku'
            /// </param>
            /// <param name='asins'>
            /// A list of up to twenty Amazon Standard Identification Number (ASIN) values
            /// used to identify items in the given marketplace.
            /// </param>
            /// <param name='skus'>
            /// A list of up to twenty seller SKU values used to identify items in the
            /// given marketplace.
            /// </param>
            /// <param name='itemCondition'>
            /// Filters the offer listings based on item condition. Possible values: New,
            /// Used, Collectible, Refurbished, Club. Possible values include: 'New',
            /// 'Used', 'Collectible', 'Refurbished', 'Club'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetPricingResponse> GetPricingAsync(this IProductPricingClient operations, string marketplaceId, string itemType, IList<string> asins = default(IList<string>), IList<string> skus = default(IList<string>), string itemCondition = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPricingWithHttpMessagesAsync(marketplaceId, itemType, asins, skus, itemCondition, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns competitive pricing information for a seller's offer listings based
            /// on seller SKU or ASIN.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 1 | 1 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace for which prices are
            /// returned.
            /// </param>
            /// <param name='itemType'>
            /// Indicates whether ASIN values or seller SKU values are used to identify
            /// items. If you specify Asin, the information in the response will be
            /// dependent on the list of Asins you provide in the Asins parameter. If you
            /// specify Sku, the information in the response will be dependent on the list
            /// of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
            /// Possible values include: 'Asin', 'Sku'
            /// </param>
            /// <param name='asins'>
            /// A list of up to twenty Amazon Standard Identification Number (ASIN) values
            /// used to identify items in the given marketplace.
            /// </param>
            /// <param name='skus'>
            /// A list of up to twenty seller SKU values used to identify items in the
            /// given marketplace.
            /// </param>
            public static GetPricingResponse GetCompetitivePricing(this IProductPricingClient operations, string marketplaceId, string itemType, IList<string> asins = default(IList<string>), IList<string> skus = default(IList<string>))
            {
                return operations.GetCompetitivePricingAsync(marketplaceId, itemType, asins, skus).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns competitive pricing information for a seller's offer listings based
            /// on seller SKU or ASIN.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 1 | 1 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace for which prices are
            /// returned.
            /// </param>
            /// <param name='itemType'>
            /// Indicates whether ASIN values or seller SKU values are used to identify
            /// items. If you specify Asin, the information in the response will be
            /// dependent on the list of Asins you provide in the Asins parameter. If you
            /// specify Sku, the information in the response will be dependent on the list
            /// of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
            /// Possible values include: 'Asin', 'Sku'
            /// </param>
            /// <param name='asins'>
            /// A list of up to twenty Amazon Standard Identification Number (ASIN) values
            /// used to identify items in the given marketplace.
            /// </param>
            /// <param name='skus'>
            /// A list of up to twenty seller SKU values used to identify items in the
            /// given marketplace.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetPricingResponse> GetCompetitivePricingAsync(this IProductPricingClient operations, string marketplaceId, string itemType, IList<string> asins = default(IList<string>), IList<string> skus = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCompetitivePricingWithHttpMessagesAsync(marketplaceId, itemType, asins, skus, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the lowest priced offers for a single SKU listing.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 1 | 1 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace for which prices are
            /// returned.
            /// </param>
            /// <param name='itemCondition'>
            /// Filters the offer listings based on item condition. Possible values: New,
            /// Used, Collectible, Refurbished, Club. Possible values include: 'New',
            /// 'Used', 'Collectible', 'Refurbished', 'Club'
            /// </param>
            /// <param name='sellerSKU'>
            /// Identifies an item in the given marketplace. SellerSKU is qualified by the
            /// seller's SellerId, which is included with every operation that you submit.
            /// </param>
            public static GetOffersResponse GetListingOffers(this IProductPricingClient operations, string marketplaceId, string itemCondition, string sellerSKU)
            {
                return operations.GetListingOffersAsync(marketplaceId, itemCondition, sellerSKU).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the lowest priced offers for a single SKU listing.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 1 | 1 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace for which prices are
            /// returned.
            /// </param>
            /// <param name='itemCondition'>
            /// Filters the offer listings based on item condition. Possible values: New,
            /// Used, Collectible, Refurbished, Club. Possible values include: 'New',
            /// 'Used', 'Collectible', 'Refurbished', 'Club'
            /// </param>
            /// <param name='sellerSKU'>
            /// Identifies an item in the given marketplace. SellerSKU is qualified by the
            /// seller's SellerId, which is included with every operation that you submit.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetOffersResponse> GetListingOffersAsync(this IProductPricingClient operations, string marketplaceId, string itemCondition, string sellerSKU, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetListingOffersWithHttpMessagesAsync(marketplaceId, itemCondition, sellerSKU, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns the lowest priced offers for a single item based on ASIN.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 1 | 1 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace for which prices are
            /// returned.
            /// </param>
            /// <param name='itemCondition'>
            /// Filters the offer listings to be considered based on item condition.
            /// Possible values: New, Used, Collectible, Refurbished, Club. Possible values
            /// include: 'New', 'Used', 'Collectible', 'Refurbished', 'Club'
            /// </param>
            /// <param name='asin'>
            /// The Amazon Standard Identification Number (ASIN) of the item.
            /// </param>
            public static GetOffersResponse GetItemOffers(this IProductPricingClient operations, string marketplaceId, string itemCondition, string asin)
            {
                return operations.GetItemOffersAsync(marketplaceId, itemCondition, asin).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns the lowest priced offers for a single item based on ASIN.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 1 | 1 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='marketplaceId'>
            /// A marketplace identifier. Specifies the marketplace for which prices are
            /// returned.
            /// </param>
            /// <param name='itemCondition'>
            /// Filters the offer listings to be considered based on item condition.
            /// Possible values: New, Used, Collectible, Refurbished, Club. Possible values
            /// include: 'New', 'Used', 'Collectible', 'Refurbished', 'Club'
            /// </param>
            /// <param name='asin'>
            /// The Amazon Standard Identification Number (ASIN) of the item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetOffersResponse> GetItemOffersAsync(this IProductPricingClient operations, string marketplaceId, string itemCondition, string asin, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemOffersWithHttpMessagesAsync(marketplaceId, itemCondition, asin, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
