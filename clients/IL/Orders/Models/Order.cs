// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Orders.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Order information.
    /// </summary>
    public partial class Order
    {
        /// <summary>
        /// Initializes a new instance of the Order class.
        /// </summary>
        public Order()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Order class.
        /// </summary>
        /// <param name="amazonOrderId">An Amazon-defined order identifier, in
        /// 3-7-7 format.</param>
        /// <param name="purchaseDate">The date when the order was
        /// created.</param>
        /// <param name="lastUpdateDate">The date when the order was last
        /// updated.
        ///
        /// Note: LastUpdateDate is returned with an incorrect date for orders
        /// that were last updated before 2009-04-01.</param>
        /// <param name="orderStatus">The current order status. Possible values
        /// include: 'Pending', 'Unshipped', 'PartiallyShipped', 'Shipped',
        /// 'Canceled', 'Unfulfillable', 'InvoiceUnconfirmed',
        /// 'PendingAvailability'</param>
        /// <param name="sellerOrderId">A seller-defined order
        /// identifier.</param>
        /// <param name="fulfillmentChannel">Whether the order was fulfilled by
        /// Amazon (AFN) or by the seller (MFN). Possible values include:
        /// 'MFN', 'AFN'</param>
        /// <param name="salesChannel">The sales channel of the first item in
        /// the order.</param>
        /// <param name="orderChannel">The order channel of the first item in
        /// the order.</param>
        /// <param name="shipServiceLevel">The shipment service level of the
        /// order.</param>
        /// <param name="orderTotal">The total charge for this order.</param>
        /// <param name="numberOfItemsShipped">The number of items
        /// shipped.</param>
        /// <param name="numberOfItemsUnshipped">The number of items
        /// unshipped.</param>
        /// <param name="paymentExecutionDetail">Information about sub-payment
        /// methods for a Cash On Delivery (COD) order.
        ///
        /// Note: For a COD order that is paid for using one sub-payment
        /// method, one PaymentExecutionDetailItem object is returned, with
        /// PaymentExecutionDetailItem/PaymentMethod = COD. For a COD order
        /// that is paid for using multiple sub-payment methods, two or more
        /// PaymentExecutionDetailItem objects are returned.</param>
        /// <param name="paymentMethod">The payment method for the order. This
        /// property is limited to Cash On Delivery (COD) and Convenience Store
        /// (CVS) payment methods. Unless you need the specific COD payment
        /// information provided by the PaymentExecutionDetailItem object, we
        /// recommend using the PaymentMethodDetails property to get payment
        /// method information. Possible values include: 'COD', 'CVS',
        /// 'Other'</param>
        /// <param name="paymentMethodDetails">A list of payment methods for
        /// the order.</param>
        /// <param name="marketplaceId">The identifier for the marketplace
        /// where the order was placed.</param>
        /// <param name="shipmentServiceLevelCategory">The shipment service
        /// level category of the order.
        ///
        /// Possible values: Expedited, FreeEconomy, NextDay, SameDay,
        /// SecondDay, Scheduled, Standard.</param>
        /// <param name="easyShipShipmentStatus">The status of the Amazon Easy
        /// Ship order. This property is included only for Amazon Easy Ship
        /// orders.
        ///
        /// Possible values: PendingPickUp, LabelCanceled, PickedUp,
        /// OutForDelivery, Damaged, Delivered, RejectedByBuyer, Undeliverable,
        /// ReturnedToSeller, ReturningToSeller.</param>
        /// <param name="cbaDisplayableShippingLabel">Custom ship label for
        /// Checkout by Amazon (CBA).</param>
        /// <param name="orderType">The type of the order. Possible values
        /// include: 'StandardOrder', 'LongLeadTimeOrder', 'Preorder',
        /// 'BackOrder', 'SourcingOnDemandOrder'</param>
        /// <param name="earliestShipDate">The start of the time period within
        /// which you have committed to ship the order. In ISO 8601 date time
        /// format. Returned only for seller-fulfilled orders.
        ///
        /// Note: EarliestShipDate might not be returned for orders placed
        /// before February 1, 2013.</param>
        /// <param name="latestShipDate">The end of the time period within
        /// which you have committed to ship the order. In ISO 8601 date time
        /// format. Returned only for seller-fulfilled orders.
        ///
        /// Note: LatestShipDate might not be returned for orders placed before
        /// February 1, 2013.</param>
        /// <param name="earliestDeliveryDate">The start of the time period
        /// within which you have committed to fulfill the order. In ISO 8601
        /// date time format. Returned only for seller-fulfilled
        /// orders.</param>
        /// <param name="latestDeliveryDate">The end of the time period within
        /// which you have committed to fulfill the order. In ISO 8601 date
        /// time format. Returned only for seller-fulfilled orders that do not
        /// have a PendingAvailability, Pending, or Canceled status.</param>
        /// <param name="isBusinessOrder">When true, the order is an Amazon
        /// Business order. An Amazon Business order is an order where the
        /// buyer is a Verified Business Buyer.</param>
        /// <param name="isPrime">When true, the order is a seller-fulfilled
        /// Amazon Prime order.</param>
        /// <param name="isPremiumOrder">When true, the order has a Premium
        /// Shipping Service Level Agreement. For more information about
        /// Premium Shipping orders, see "Premium Shipping Options" in the
        /// Seller Central Help for your marketplace.</param>
        /// <param name="isGlobalExpressEnabled">When true, the order is a
        /// GlobalExpress order.</param>
        /// <param name="replacedOrderId">The order ID value for the order that
        /// is being replaced. Returned only if IsReplacementOrder =
        /// true.</param>
        /// <param name="isReplacementOrder">When true, this is a replacement
        /// order.</param>
        /// <param name="promiseResponseDueDate">Indicates the date by which
        /// the seller must respond to the buyer with an estimated ship date.
        /// Returned only for Sourcing on Demand orders.</param>
        /// <param name="isEstimatedShipDateSet">When true, the estimated ship
        /// date is set for the order. Returned only for Sourcing on Demand
        /// orders.</param>
        /// <param name="isSoldByAB">When true, the item within this order was
        /// bought and re-sold by Amazon Business EU SARL (ABEU). By buying and
        /// instantly re-selling your items, ABEU becomes the seller of record,
        /// making your inventory available for sale to customers who would not
        /// otherwise purchase from a third-party seller.</param>
        /// <param name="defaultShipFromLocationAddress">The recommended
        /// location for the seller to ship the items from. It is calculated at
        /// checkout. The seller may or may not choose to ship from this
        /// location.</param>
        /// <param name="buyerInvoicePreference">The buyer’s invoicing
        /// preference. Possible values include: 'INDIVIDUAL',
        /// 'BUSINESS'</param>
        /// <param name="buyerTaxInformation">Contains the business invoice tax
        /// information.</param>
        /// <param name="fulfillmentInstruction">Contains the instructions
        /// about the fulfillment like where should it be fulfilled
        /// from.</param>
        /// <param name="isISPU">When true, this order is marked to be picked
        /// up from a store rather than delivered.</param>
        /// <param name="marketplaceTaxInfo">Tax information about the
        /// marketplace.</param>
        /// <param name="sellerDisplayName">The seller’s friendly name
        /// registered in the marketplace.</param>
        /// <param name="automatedShippingSettings">Contains information
        /// regarding the Shipping Settings Automaton program, such as whether
        /// the order's shipping settings were generated automatically, and
        /// what those settings are.</param>
        public Order(string amazonOrderId, string purchaseDate, string lastUpdateDate, string orderStatus, string sellerOrderId = default(string), string fulfillmentChannel = default(string), string salesChannel = default(string), string orderChannel = default(string), string shipServiceLevel = default(string), Money orderTotal = default(Money), int? numberOfItemsShipped = default(int?), int? numberOfItemsUnshipped = default(int?), IList<PaymentExecutionDetailItem> paymentExecutionDetail = default(IList<PaymentExecutionDetailItem>), string paymentMethod = default(string), IList<string> paymentMethodDetails = default(IList<string>), string marketplaceId = default(string), string shipmentServiceLevelCategory = default(string), string easyShipShipmentStatus = default(string), string cbaDisplayableShippingLabel = default(string), string orderType = default(string), string earliestShipDate = default(string), string latestShipDate = default(string), string earliestDeliveryDate = default(string), string latestDeliveryDate = default(string), bool? isBusinessOrder = default(bool?), bool? isPrime = default(bool?), bool? isPremiumOrder = default(bool?), bool? isGlobalExpressEnabled = default(bool?), string replacedOrderId = default(string), bool? isReplacementOrder = default(bool?), string promiseResponseDueDate = default(string), bool? isEstimatedShipDateSet = default(bool?), bool? isSoldByAB = default(bool?), Address defaultShipFromLocationAddress = default(Address), string buyerInvoicePreference = default(string), BuyerTaxInformation buyerTaxInformation = default(BuyerTaxInformation), FulfillmentInstruction fulfillmentInstruction = default(FulfillmentInstruction), bool? isISPU = default(bool?), MarketplaceTaxInfo marketplaceTaxInfo = default(MarketplaceTaxInfo), string sellerDisplayName = default(string), Address shippingAddress = default(Address), BuyerInfo buyerInfo = default(BuyerInfo), AutomatedShippingSettings automatedShippingSettings = default(AutomatedShippingSettings))
        {
            AmazonOrderId = amazonOrderId;
            SellerOrderId = sellerOrderId;
            PurchaseDate = purchaseDate;
            LastUpdateDate = lastUpdateDate;
            OrderStatus = orderStatus;
            FulfillmentChannel = fulfillmentChannel;
            SalesChannel = salesChannel;
            OrderChannel = orderChannel;
            ShipServiceLevel = shipServiceLevel;
            OrderTotal = orderTotal;
            NumberOfItemsShipped = numberOfItemsShipped;
            NumberOfItemsUnshipped = numberOfItemsUnshipped;
            PaymentExecutionDetail = paymentExecutionDetail;
            PaymentMethod = paymentMethod;
            PaymentMethodDetails = paymentMethodDetails;
            MarketplaceId = marketplaceId;
            ShipmentServiceLevelCategory = shipmentServiceLevelCategory;
            EasyShipShipmentStatus = easyShipShipmentStatus;
            CbaDisplayableShippingLabel = cbaDisplayableShippingLabel;
            OrderType = orderType;
            EarliestShipDate = earliestShipDate;
            LatestShipDate = latestShipDate;
            EarliestDeliveryDate = earliestDeliveryDate;
            LatestDeliveryDate = latestDeliveryDate;
            IsBusinessOrder = isBusinessOrder;
            IsPrime = isPrime;
            IsPremiumOrder = isPremiumOrder;
            IsGlobalExpressEnabled = isGlobalExpressEnabled;
            ReplacedOrderId = replacedOrderId;
            IsReplacementOrder = isReplacementOrder;
            PromiseResponseDueDate = promiseResponseDueDate;
            IsEstimatedShipDateSet = isEstimatedShipDateSet;
            IsSoldByAB = isSoldByAB;
            DefaultShipFromLocationAddress = defaultShipFromLocationAddress;
            BuyerInvoicePreference = buyerInvoicePreference;
            BuyerTaxInformation = buyerTaxInformation;
            FulfillmentInstruction = fulfillmentInstruction;
            IsISPU = isISPU;
            MarketplaceTaxInfo = marketplaceTaxInfo;
            SellerDisplayName = sellerDisplayName;
            ShippingAddress = shippingAddress;
            BuyerInfo = buyerInfo;
            AutomatedShippingSettings = automatedShippingSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets an Amazon-defined order identifier, in 3-7-7 format.
        /// </summary>
        [JsonProperty(PropertyName = "AmazonOrderId")]
        public string AmazonOrderId { get; set; }

        /// <summary>
        /// Gets or sets a seller-defined order identifier.
        /// </summary>
        [JsonProperty(PropertyName = "SellerOrderId")]
        public string SellerOrderId { get; set; }

        /// <summary>
        /// Gets or sets the date when the order was created.
        /// </summary>
        [JsonProperty(PropertyName = "PurchaseDate")]
        public string PurchaseDate { get; set; }

        /// <summary>
        /// Gets or sets the date when the order was last updated.
        ///
        /// Note: LastUpdateDate is returned with an incorrect date for orders
        /// that were last updated before 2009-04-01.
        /// </summary>
        [JsonProperty(PropertyName = "LastUpdateDate")]
        public string LastUpdateDate { get; set; }

        /// <summary>
        /// Gets or sets the current order status. Possible values include:
        /// 'Pending', 'Unshipped', 'PartiallyShipped', 'Shipped', 'Canceled',
        /// 'Unfulfillable', 'InvoiceUnconfirmed', 'PendingAvailability'
        /// </summary>
        [JsonProperty(PropertyName = "OrderStatus")]
        public string OrderStatus { get; set; }

        /// <summary>
        /// Gets or sets whether the order was fulfilled by Amazon (AFN) or by
        /// the seller (MFN). Possible values include: 'MFN', 'AFN'
        /// </summary>
        [JsonProperty(PropertyName = "FulfillmentChannel")]
        public string FulfillmentChannel { get; set; }

        /// <summary>
        /// Gets or sets the sales channel of the first item in the order.
        /// </summary>
        [JsonProperty(PropertyName = "SalesChannel")]
        public string SalesChannel { get; set; }

        /// <summary>
        /// Gets or sets the order channel of the first item in the order.
        /// </summary>
        [JsonProperty(PropertyName = "OrderChannel")]
        public string OrderChannel { get; set; }

        /// <summary>
        /// Gets or sets the shipment service level of the order.
        /// </summary>
        [JsonProperty(PropertyName = "ShipServiceLevel")]
        public string ShipServiceLevel { get; set; }

        /// <summary>
        /// Gets or sets the total charge for this order.
        /// </summary>
        [JsonProperty(PropertyName = "OrderTotal")]
        public Money OrderTotal { get; set; }

        /// <summary>
        /// Gets or sets the number of items shipped.
        /// </summary>
        [JsonProperty(PropertyName = "NumberOfItemsShipped")]
        public int? NumberOfItemsShipped { get; set; }

        /// <summary>
        /// Gets or sets the number of items unshipped.
        /// </summary>
        [JsonProperty(PropertyName = "NumberOfItemsUnshipped")]
        public int? NumberOfItemsUnshipped { get; set; }

        /// <summary>
        /// Gets or sets information about sub-payment methods for a Cash On
        /// Delivery (COD) order.
        ///
        /// Note: For a COD order that is paid for using one sub-payment
        /// method, one PaymentExecutionDetailItem object is returned, with
        /// PaymentExecutionDetailItem/PaymentMethod = COD. For a COD order
        /// that is paid for using multiple sub-payment methods, two or more
        /// PaymentExecutionDetailItem objects are returned.
        /// </summary>
        [JsonProperty(PropertyName = "PaymentExecutionDetail")]
        public IList<PaymentExecutionDetailItem> PaymentExecutionDetail { get; set; }

        /// <summary>
        /// Gets or sets the payment method for the order. This property is
        /// limited to Cash On Delivery (COD) and Convenience Store (CVS)
        /// payment methods. Unless you need the specific COD payment
        /// information provided by the PaymentExecutionDetailItem object, we
        /// recommend using the PaymentMethodDetails property to get payment
        /// method information. Possible values include: 'COD', 'CVS', 'Other'
        /// </summary>
        [JsonProperty(PropertyName = "PaymentMethod")]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or sets a list of payment methods for the order.
        /// </summary>
        [JsonProperty(PropertyName = "PaymentMethodDetails")]
        public IList<string> PaymentMethodDetails { get; set; }

        /// <summary>
        /// Gets or sets the identifier for the marketplace where the order was
        /// placed.
        /// </summary>
        [JsonProperty(PropertyName = "MarketplaceId")]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Gets or sets the shipment service level category of the order.
        ///
        /// Possible values: Expedited, FreeEconomy, NextDay, SameDay,
        /// SecondDay, Scheduled, Standard.
        /// </summary>
        [JsonProperty(PropertyName = "ShipmentServiceLevelCategory")]
        public string ShipmentServiceLevelCategory { get; set; }

        /// <summary>
        /// Gets or sets the status of the Amazon Easy Ship order. This
        /// property is included only for Amazon Easy Ship orders.
        ///
        /// Possible values: PendingPickUp, LabelCanceled, PickedUp,
        /// OutForDelivery, Damaged, Delivered, RejectedByBuyer, Undeliverable,
        /// ReturnedToSeller, ReturningToSeller.
        /// </summary>
        [JsonProperty(PropertyName = "EasyShipShipmentStatus")]
        public string EasyShipShipmentStatus { get; set; }

        /// <summary>
        /// Gets or sets custom ship label for Checkout by Amazon (CBA).
        /// </summary>
        [JsonProperty(PropertyName = "CbaDisplayableShippingLabel")]
        public string CbaDisplayableShippingLabel { get; set; }

        /// <summary>
        /// Gets or sets the type of the order. Possible values include:
        /// 'StandardOrder', 'LongLeadTimeOrder', 'Preorder', 'BackOrder',
        /// 'SourcingOnDemandOrder'
        /// </summary>
        [JsonProperty(PropertyName = "OrderType")]
        public string OrderType { get; set; }

        /// <summary>
        /// Gets or sets the start of the time period within which you have
        /// committed to ship the order. In ISO 8601 date time format. Returned
        /// only for seller-fulfilled orders.
        ///
        /// Note: EarliestShipDate might not be returned for orders placed
        /// before February 1, 2013.
        /// </summary>
        [JsonProperty(PropertyName = "EarliestShipDate")]
        public string EarliestShipDate { get; set; }

        /// <summary>
        /// Gets or sets the end of the time period within which you have
        /// committed to ship the order. In ISO 8601 date time format. Returned
        /// only for seller-fulfilled orders.
        ///
        /// Note: LatestShipDate might not be returned for orders placed before
        /// February 1, 2013.
        /// </summary>
        [JsonProperty(PropertyName = "LatestShipDate")]
        public string LatestShipDate { get; set; }

        /// <summary>
        /// Gets or sets the start of the time period within which you have
        /// committed to fulfill the order. In ISO 8601 date time format.
        /// Returned only for seller-fulfilled orders.
        /// </summary>
        [JsonProperty(PropertyName = "EarliestDeliveryDate")]
        public string EarliestDeliveryDate { get; set; }

        /// <summary>
        /// Gets or sets the end of the time period within which you have
        /// committed to fulfill the order. In ISO 8601 date time format.
        /// Returned only for seller-fulfilled orders that do not have a
        /// PendingAvailability, Pending, or Canceled status.
        /// </summary>
        [JsonProperty(PropertyName = "LatestDeliveryDate")]
        public string LatestDeliveryDate { get; set; }

        /// <summary>
        /// Gets or sets when true, the order is an Amazon Business order. An
        /// Amazon Business order is an order where the buyer is a Verified
        /// Business Buyer.
        /// </summary>
        [JsonProperty(PropertyName = "IsBusinessOrder")]
        public bool? IsBusinessOrder { get; set; }

        /// <summary>
        /// Gets or sets when true, the order is a seller-fulfilled Amazon
        /// Prime order.
        /// </summary>
        [JsonProperty(PropertyName = "IsPrime")]
        public bool? IsPrime { get; set; }

        /// <summary>
        /// Gets or sets when true, the order has a Premium Shipping Service
        /// Level Agreement. For more information about Premium Shipping
        /// orders, see "Premium Shipping Options" in the Seller Central Help
        /// for your marketplace.
        /// </summary>
        [JsonProperty(PropertyName = "IsPremiumOrder")]
        public bool? IsPremiumOrder { get; set; }

        /// <summary>
        /// Gets or sets when true, the order is a GlobalExpress order.
        /// </summary>
        [JsonProperty(PropertyName = "IsGlobalExpressEnabled")]
        public bool? IsGlobalExpressEnabled { get; set; }

        /// <summary>
        /// Gets or sets the order ID value for the order that is being
        /// replaced. Returned only if IsReplacementOrder = true.
        /// </summary>
        [JsonProperty(PropertyName = "ReplacedOrderId")]
        public string ReplacedOrderId { get; set; }

        /// <summary>
        /// Gets or sets when true, this is a replacement order.
        /// </summary>
        [JsonProperty(PropertyName = "IsReplacementOrder")]
        public bool? IsReplacementOrder { get; set; }

        /// <summary>
        /// Gets or sets indicates the date by which the seller must respond to
        /// the buyer with an estimated ship date. Returned only for Sourcing
        /// on Demand orders.
        /// </summary>
        [JsonProperty(PropertyName = "PromiseResponseDueDate")]
        public string PromiseResponseDueDate { get; set; }

        /// <summary>
        /// Gets or sets when true, the estimated ship date is set for the
        /// order. Returned only for Sourcing on Demand orders.
        /// </summary>
        [JsonProperty(PropertyName = "IsEstimatedShipDateSet")]
        public bool? IsEstimatedShipDateSet { get; set; }

        /// <summary>
        /// Gets or sets when true, the item within this order was bought and
        /// re-sold by Amazon Business EU SARL (ABEU). By buying and instantly
        /// re-selling your items, ABEU becomes the seller of record, making
        /// your inventory available for sale to customers who would not
        /// otherwise purchase from a third-party seller.
        /// </summary>
        [JsonProperty(PropertyName = "IsSoldByAB")]
        public bool? IsSoldByAB { get; set; }

        /// <summary>
        /// Gets or sets the recommended location for the seller to ship the
        /// items from. It is calculated at checkout. The seller may or may not
        /// choose to ship from this location.
        /// </summary>
        [JsonProperty(PropertyName = "DefaultShipFromLocationAddress")]
        public Address DefaultShipFromLocationAddress { get; set; }

        /// <summary>
        /// Gets or sets the buyer’s invoicing preference. Possible values
        /// include: 'INDIVIDUAL', 'BUSINESS'
        /// </summary>
        [JsonProperty(PropertyName = "BuyerInvoicePreference")]
        public string BuyerInvoicePreference { get; set; }

        /// <summary>
        /// Gets or sets contains the business invoice tax information.
        /// </summary>
        [JsonProperty(PropertyName = "BuyerTaxInformation")]
        public BuyerTaxInformation BuyerTaxInformation { get; set; }

        /// <summary>
        /// Gets or sets contains the instructions about the fulfillment like
        /// where should it be fulfilled from.
        /// </summary>
        [JsonProperty(PropertyName = "FulfillmentInstruction")]
        public FulfillmentInstruction FulfillmentInstruction { get; set; }

        /// <summary>
        /// Gets or sets when true, this order is marked to be picked up from a
        /// store rather than delivered.
        /// </summary>
        [JsonProperty(PropertyName = "IsISPU")]
        public bool? IsISPU { get; set; }

        /// <summary>
        /// Gets or sets tax information about the marketplace.
        /// </summary>
        [JsonProperty(PropertyName = "MarketplaceTaxInfo")]
        public MarketplaceTaxInfo MarketplaceTaxInfo { get; set; }

        /// <summary>
        /// Gets or sets the seller’s friendly name registered in the
        /// marketplace.
        /// </summary>
        [JsonProperty(PropertyName = "SellerDisplayName")]
        public string SellerDisplayName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShippingAddress")]
        public Address ShippingAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BuyerInfo")]
        public BuyerInfo BuyerInfo { get; set; }

        /// <summary>
        /// Gets or sets contains information regarding the Shipping Settings
        /// Automaton program, such as whether the order's shipping settings
        /// were generated automatically, and what those settings are.
        /// </summary>
        [JsonProperty(PropertyName = "AutomatedShippingSettings")]
        public AutomatedShippingSettings AutomatedShippingSettings { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AmazonOrderId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AmazonOrderId");
            }
            if (PurchaseDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PurchaseDate");
            }
            if (LastUpdateDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LastUpdateDate");
            }
            if (OrderStatus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OrderStatus");
            }
            if (PaymentExecutionDetail != null)
            {
                foreach (var element in PaymentExecutionDetail)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (DefaultShipFromLocationAddress != null)
            {
                DefaultShipFromLocationAddress.Validate();
            }
            if (ShippingAddress != null)
            {
                ShippingAddress.Validate();
            }
        }
    }
}
