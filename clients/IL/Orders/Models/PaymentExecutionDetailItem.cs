// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.Orders.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Information about a sub-payment method used to pay for a COD order.
    /// </summary>
    public partial class PaymentExecutionDetailItem
    {
        /// <summary>
        /// Initializes a new instance of the PaymentExecutionDetailItem class.
        /// </summary>
        public PaymentExecutionDetailItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PaymentExecutionDetailItem class.
        /// </summary>
        /// <param name="paymentMethod">A sub-payment method for a COD order.
        ///
        /// Possible values:
        ///
        /// * COD - Cash On Delivery.
        ///
        /// * GC - Gift Card.
        ///
        /// * PointsAccount - Amazon Points.</param>
        public PaymentExecutionDetailItem(Money payment, string paymentMethod)
        {
            Payment = payment;
            PaymentMethod = paymentMethod;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Payment")]
        public Money Payment { get; set; }

        /// <summary>
        /// Gets or sets a sub-payment method for a COD order.
        ///
        /// Possible values:
        ///
        /// * COD - Cash On Delivery.
        ///
        /// * GC - Gift Card.
        ///
        /// * PointsAccount - Amazon Points.
        /// </summary>
        [JsonProperty(PropertyName = "PaymentMethod")]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Payment == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Payment");
            }
            if (PaymentMethod == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PaymentMethod");
            }
        }
    }
}
