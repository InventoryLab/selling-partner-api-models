// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace IL.Library.Amazon.SPAPI.FBAInboundEligibility
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FBAInboundEligibilityClient.
    /// </summary>
    public static partial class FBAInboundEligibilityClientExtensions
    {
            /// <summary>
            /// This operation gets an eligibility preview for an item that you specify.
            /// You can specify the type of eligibility preview that you want (INBOUND or
            /// COMMINGLING). For INBOUND previews, you can specify the marketplace in
            /// which you want to determine the item's eligibility.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 1 | 1 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asin'>
            /// The ASIN of the item for which you want an eligibility preview.
            /// </param>
            /// <param name='program'>
            /// The program that you want to check eligibility against. Possible values
            /// include: 'INBOUND', 'COMMINGLING'
            /// </param>
            /// <param name='marketplaceIds'>
            /// The identifier for the marketplace in which you want to determine
            /// eligibility. Required only when program=INBOUND.
            /// </param>
            public static GetItemEligibilityPreviewResponse GetItemEligibilityPreview(this IFBAInboundEligibilityClient operations, string asin, string program, IList<string> marketplaceIds = default(IList<string>))
            {
                return operations.GetItemEligibilityPreviewAsync(asin, program, marketplaceIds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation gets an eligibility preview for an item that you specify.
            /// You can specify the type of eligibility preview that you want (INBOUND or
            /// COMMINGLING). For INBOUND previews, you can specify the marketplace in
            /// which you want to determine the item's eligibility.
            ///
            /// **Usage Plan:**
            ///
            /// | Rate (requests per second) | Burst |
            /// | ---- | ---- |
            /// | 1 | 1 |
            ///
            /// For more information, see "Usage Plans and Rate Limits" in the Selling
            /// Partner API documentation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='asin'>
            /// The ASIN of the item for which you want an eligibility preview.
            /// </param>
            /// <param name='program'>
            /// The program that you want to check eligibility against. Possible values
            /// include: 'INBOUND', 'COMMINGLING'
            /// </param>
            /// <param name='marketplaceIds'>
            /// The identifier for the marketplace in which you want to determine
            /// eligibility. Required only when program=INBOUND.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetItemEligibilityPreviewResponse> GetItemEligibilityPreviewAsync(this IFBAInboundEligibilityClient operations, string asin, string program, IList<string> marketplaceIds = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetItemEligibilityPreviewWithHttpMessagesAsync(asin, program, marketplaceIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
